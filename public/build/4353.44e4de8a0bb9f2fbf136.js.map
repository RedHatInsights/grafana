{"version":3,"file":"4353.44e4de8a0bb9f2fbf136.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/prometheus/add_label_to_query.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/language_utils.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-ca2705900f/0/cache/react-use-npm-17.2.4-c702db5427-3c885c3798.zip/node_modules/react-use/esm/usePrevious.js","webpack://grafana/./.yarn/cache/lru-cache-npm-6.0.0-b4c8668fe1-f97f499f89.zip/node_modules/lru-cache/index.js","webpack://grafana/./.yarn/cache/yallist-npm-4.0.0-b493d9e907-343617202a.zip/node_modules/yallist/iterator.js","webpack://grafana/./.yarn/cache/yallist-npm-4.0.0-b493d9e907-343617202a.zip/node_modules/yallist/yallist.js"],"sourcesContent":["import { chain, isEqual } from 'lodash';\nimport { OPERATORS, LOGICAL_OPERATORS, PROM_KEYWORDS } from './promql';\n\nconst builtInWords = [...PROM_KEYWORDS, ...OPERATORS, ...LOGICAL_OPERATORS];\n\n// We want to extract all possible metrics and also keywords\nconst metricsAndKeywordsRegexp = /([A-Za-z:][\\w:]*)\\b(?![\\]{=!\",])/g;\n// Safari currently doesn't support negative lookbehind. When it does, we should refactor this.\n// We are creating 2 matching groups. (\\$) is for the Grafana's variables such as ${__rate_s}. We want to ignore\n// ${__rate_s} and not add variable to it.\nconst selectorRegexp = /(\\$)?{([^{]*)}/g;\n\nexport function addLabelToQuery(\n  query: string,\n  key: string,\n  value: string | number,\n  operator?: string,\n  hasNoMetrics?: boolean\n): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  // We need to make sure that we convert the value back to string because it may be a number\n  const transformedValue = value === Infinity ? '+Inf' : value.toString();\n\n  // Add empty selectors to bare metric names\n  let previousWord: string;\n\n  query = query.replace(metricsAndKeywordsRegexp, (match, word, offset) => {\n    const isMetric = isWordMetric(query, word, offset, previousWord, hasNoMetrics);\n    previousWord = word;\n\n    return isMetric ? `${word}{}` : word;\n  });\n\n  // Adding label to existing selectors\n  let match = selectorRegexp.exec(query);\n  const parts = [];\n  let lastIndex = 0;\n  let suffix = '';\n\n  while (match) {\n    const prefix = query.slice(lastIndex, match.index);\n    lastIndex = match.index + match[2].length + 2;\n    suffix = query.slice(match.index + match[0].length);\n    // If we matched 1st group, we know it is Grafana's variable and we don't want to add labels\n    if (match[1]) {\n      parts.push(prefix);\n      parts.push(match[0]);\n    } else {\n      // If we didn't match first group, we are inside selector and we want to add labels\n      const selector = match[2];\n      const selectorWithLabel = addLabelToSelector(selector, key, transformedValue, operator);\n      parts.push(prefix, selectorWithLabel);\n    }\n\n    match = selectorRegexp.exec(query);\n  }\n\n  parts.push(suffix);\n  return parts.join('');\n}\n\nconst labelRegexp = /(\\w+)\\s*(=|!=|=~|!~)\\s*(\"[^\"]*\")/g;\n\nexport function addLabelToSelector(selector: string, labelKey: string, labelValue: string, labelOperator?: string) {\n  const parsedLabels = [];\n\n  // Split selector into labels\n  if (selector) {\n    let match = labelRegexp.exec(selector);\n    while (match) {\n      parsedLabels.push({ key: match[1], operator: match[2], value: match[3] });\n      match = labelRegexp.exec(selector);\n    }\n  }\n\n  // Add new label\n  const operatorForLabelKey = labelOperator || '=';\n  parsedLabels.push({ key: labelKey, operator: operatorForLabelKey, value: `\"${labelValue}\"` });\n\n  // Sort labels by key and put them together\n  const formatted = chain(parsedLabels)\n    .uniqWith(isEqual)\n    .compact()\n    .sortBy('key')\n    .map(({ key, operator, value }) => `${key}${operator}${value}`)\n    .value()\n    .join(',');\n\n  return `{${formatted}}`;\n}\n\nfunction isPositionInsideChars(text: string, position: number, openChar: string, closeChar: string) {\n  const nextSelectorStart = text.slice(position).indexOf(openChar);\n  const nextSelectorEnd = text.slice(position).indexOf(closeChar);\n  return nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);\n}\n\nfunction isWordMetric(query: string, word: string, offset: number, previousWord: string, hasNoMetrics?: boolean) {\n  const insideSelector = isPositionInsideChars(query, offset, '{', '}');\n  // Handle \"sum by (key) (metric)\"\n  const previousWordIsKeyWord = previousWord && OPERATORS.indexOf(previousWord) > -1;\n  // Check for colon as as \"word boundary\" symbol\n  const isColonBounded = word.endsWith(':');\n  // Check for words that start with \" which means that they are not metrics\n  const startsWithQuote = query[offset - 1] === '\"';\n  // Check for template variables\n  const isTemplateVariable = query[offset - 1] === '$';\n  // Check for time units\n  const isTimeUnit = ['s', 'm', 'h', 'd', 'w'].includes(word) && Boolean(Number(query[offset - 1]));\n\n  if (\n    !hasNoMetrics &&\n    !insideSelector &&\n    !isColonBounded &&\n    !previousWordIsKeyWord &&\n    !startsWithQuote &&\n    !isTemplateVariable &&\n    !isTimeUnit &&\n    builtInWords.indexOf(word) === -1\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport default addLabelToQuery;\n","import { once, chain, difference } from 'lodash';\nimport LRU from 'lru-cache';\nimport { Value } from 'slate';\nimport Prism from 'prismjs';\n\nimport {\n  AbstractLabelMatcher,\n  AbstractLabelOperator,\n  AbstractQuery,\n  dateTime,\n  HistoryItem,\n  LanguageProvider,\n} from '@grafana/data';\nimport { CompletionItem, CompletionItemGroup, SearchFunctionType, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport {\n  addLimitInfo,\n  extractLabelMatchers,\n  fixSummariesMetadata,\n  parseSelector,\n  processHistogramMetrics,\n  processLabels,\n  roundSecToMin,\n  toPromLikeQuery,\n} from './language_utils';\nimport PromqlSyntax, { FUNCTIONS, RATE_RANGES } from './promql';\n\nimport { PrometheusDatasource } from './datasource';\nimport { PromMetricsMetadata, PromQuery } from './types';\n\nconst DEFAULT_KEYS = ['job', 'instance'];\nconst EMPTY_SELECTOR = '{}';\nconst HISTORY_ITEM_COUNT = 5;\nconst HISTORY_COUNT_CUTOFF = 1000 * 60 * 60 * 24; // 24h\n// Max number of items (metrics, labels, values) that we display as suggestions. Prevents from running out of memory.\nexport const SUGGESTIONS_LIMIT = 10000;\n\nconst wrapLabel = (label: string): CompletionItem => ({ label });\n\nconst setFunctionKind = (suggestion: CompletionItem): CompletionItem => {\n  suggestion.kind = 'function';\n  return suggestion;\n};\n\nexport function addHistoryMetadata(item: CompletionItem, history: any[]): CompletionItem {\n  const cutoffTs = Date.now() - HISTORY_COUNT_CUTOFF;\n  const historyForItem = history.filter((h) => h.ts > cutoffTs && h.query === item.label);\n  const count = historyForItem.length;\n  const recent = historyForItem[0];\n  let hint = `Queried ${count} times in the last 24h.`;\n\n  if (recent) {\n    const lastQueried = dateTime(recent.ts).fromNow();\n    hint = `${hint} Last queried ${lastQueried}.`;\n  }\n\n  return {\n    ...item,\n    documentation: hint,\n  };\n}\n\nfunction addMetricsMetadata(metric: string, metadata?: PromMetricsMetadata): CompletionItem {\n  const item: CompletionItem = { label: metric };\n  if (metadata && metadata[metric]) {\n    const { type, help } = metadata[metric];\n    item.documentation = `${type.toUpperCase()}: ${help}`;\n  }\n  return item;\n}\n\nconst PREFIX_DELIMITER_REGEX = /(=\"|!=\"|=~\"|!~\"|\\{|\\[|\\(|\\+|-|\\/|\\*|%|\\^|\\band\\b|\\bor\\b|\\bunless\\b|==|>=|!=|<=|>|<|=|~|,)/;\n\ninterface AutocompleteContext {\n  history?: Array<HistoryItem<PromQuery>>;\n}\nexport default class PromQlLanguageProvider extends LanguageProvider {\n  histogramMetrics: string[];\n  timeRange?: { start: number; end: number };\n  metrics: string[];\n  metricsMetadata?: PromMetricsMetadata;\n  declare startTask: Promise<any>;\n  datasource: PrometheusDatasource;\n  labelKeys: string[] = [];\n  declare labelFetchTs: number;\n\n  /**\n   *  Cache for labels of series. This is bit simplistic in the sense that it just counts responses each as a 1 and does\n   *  not account for different size of a response. If that is needed a `length` function can be added in the options.\n   *  10 as a max size is totally arbitrary right now.\n   */\n  private labelsCache = new LRU<string, Record<string, string[]>>(10);\n\n  constructor(datasource: PrometheusDatasource, initialValues?: Partial<PromQlLanguageProvider>) {\n    super();\n\n    this.datasource = datasource;\n    this.histogramMetrics = [];\n    this.timeRange = { start: 0, end: 0 };\n    this.metrics = [];\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars so that typeahead suggestions can work on clean inputs\n  cleanText(s: string) {\n    const parts = s.split(PREFIX_DELIMITER_REGEX);\n    const last = parts.pop()!;\n    return last.trimLeft().replace(/\"$/, '').replace(/^\"/, '');\n  }\n\n  get syntax() {\n    return PromqlSyntax;\n  }\n\n  request = async (url: string, defaultValue: any, params = {}): Promise<any> => {\n    try {\n      const res = await this.datasource.metadataRequest(url, params);\n      return res.data.data;\n    } catch (error) {\n      console.error(error);\n    }\n\n    return defaultValue;\n  };\n\n  start = async (): Promise<any[]> => {\n    if (this.datasource.lookupsDisabled) {\n      return [];\n    }\n\n    // TODO #33976: make those requests parallel\n    await this.fetchLabels();\n    this.metrics = (await this.fetchLabelValues('__name__')) || [];\n    this.metricsMetadata = fixSummariesMetadata(await this.request('/api/v1/metadata', {}));\n    this.histogramMetrics = processHistogramMetrics(this.metrics).sort();\n    return [];\n  };\n\n  getLabelKeys(): string[] {\n    return this.labelKeys;\n  }\n\n  provideCompletionItems = async (\n    { prefix, text, value, labelKey, wrapperClasses }: TypeaheadInput,\n    context: AutocompleteContext = {}\n  ): Promise<TypeaheadOutput> => {\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    // Local text properties\n    const empty = value.document.text.length === 0;\n    const selectedLines = value.document.getTextsAtRange(value.selection);\n    const currentLine = selectedLines.size === 1 ? selectedLines.first().getText() : null;\n\n    const nextCharacter = currentLine ? currentLine[value.selection.anchor.offset] : null;\n\n    // Syntax spans have 3 classes by default. More indicate a recognized token\n    const tokenRecognized = wrapperClasses.length > 3;\n    // Non-empty prefix, but not inside known token\n    const prefixUnrecognized = prefix && !tokenRecognized;\n\n    // Prevent suggestions in `function(|suffix)`\n    const noSuffix = !nextCharacter || nextCharacter === ')';\n\n    // Prefix is safe if it does not immediately follow a complete expression and has no text after it\n    const safePrefix = prefix && !text.match(/^[\\]})\\s]+$/) && noSuffix;\n\n    // About to type next operand if preceded by binary operator\n    const operatorsPattern = /[+\\-*/^%]/;\n    const isNextOperand = text.match(operatorsPattern);\n\n    // Determine candidates by CSS context\n    if (wrapperClasses.includes('context-range')) {\n      // Suggestions for metric[|]\n      return this.getRangeCompletionItems();\n    } else if (wrapperClasses.includes('context-labels')) {\n      // Suggestions for metric{|} and metric{foo=|}, as well as metric-independent label queries like {|}\n      return this.getLabelCompletionItems({ prefix, text, value, labelKey, wrapperClasses });\n    } else if (wrapperClasses.includes('context-aggregation')) {\n      // Suggestions for sum(metric) by (|)\n      return this.getAggregationCompletionItems(value);\n    } else if (empty) {\n      // Suggestions for empty query field\n      return this.getEmptyCompletionItems(context);\n    } else if (prefixUnrecognized && noSuffix && !isNextOperand) {\n      // Show term suggestions in a couple of scenarios\n      return this.getBeginningCompletionItems(context);\n    } else if (prefixUnrecognized && safePrefix) {\n      // Show term suggestions in a couple of scenarios\n      return this.getTermCompletionItems();\n    }\n\n    return emptyResult;\n  };\n\n  getBeginningCompletionItems = (context: AutocompleteContext): TypeaheadOutput => {\n    return {\n      suggestions: [...this.getEmptyCompletionItems(context).suggestions, ...this.getTermCompletionItems().suggestions],\n    };\n  };\n\n  getEmptyCompletionItems = (context: AutocompleteContext): TypeaheadOutput => {\n    const { history } = context;\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (history && history.length) {\n      const historyItems = chain(history)\n        .map((h) => h.query.expr)\n        .filter()\n        .uniq()\n        .take(HISTORY_ITEM_COUNT)\n        .map(wrapLabel)\n        .map((item) => addHistoryMetadata(item, history))\n        .value();\n\n      suggestions.push({\n        searchFunctionType: SearchFunctionType.Prefix,\n        skipSort: true,\n        label: 'History',\n        items: historyItems,\n      });\n    }\n\n    return { suggestions };\n  };\n\n  getTermCompletionItems = (): TypeaheadOutput => {\n    const { metrics, metricsMetadata } = this;\n    const suggestions: CompletionItemGroup[] = [];\n\n    suggestions.push({\n      searchFunctionType: SearchFunctionType.Prefix,\n      label: 'Functions',\n      items: FUNCTIONS.map(setFunctionKind),\n    });\n\n    if (metrics && metrics.length) {\n      suggestions.push({\n        label: 'Metrics',\n        items: metrics.map((m) => addMetricsMetadata(m, metricsMetadata)),\n        searchFunctionType: SearchFunctionType.Fuzzy,\n      });\n    }\n\n    return { suggestions };\n  };\n\n  getRangeCompletionItems(): TypeaheadOutput {\n    return {\n      context: 'context-range',\n      suggestions: [\n        {\n          label: 'Range vector',\n          items: [...RATE_RANGES],\n        },\n      ],\n    };\n  }\n\n  getAggregationCompletionItems = async (value: Value): Promise<TypeaheadOutput> => {\n    const suggestions: CompletionItemGroup[] = [];\n\n    // Stitch all query lines together to support multi-line queries\n    let queryOffset;\n    const queryText = value.document.getBlocks().reduce((text, block) => {\n      if (text === undefined) {\n        return '';\n      }\n      if (!block) {\n        return text;\n      }\n\n      const blockText = block?.getText();\n\n      if (value.anchorBlock.key === block.key) {\n        // Newline characters are not accounted for but this is irrelevant\n        // for the purpose of extracting the selector string\n        queryOffset = value.selection.anchor.offset + text.length;\n      }\n\n      return text + blockText;\n    }, '');\n\n    // Try search for selector part on the left-hand side, such as `sum (m) by (l)`\n    const openParensAggregationIndex = queryText.lastIndexOf('(', queryOffset);\n    let openParensSelectorIndex = queryText.lastIndexOf('(', openParensAggregationIndex - 1);\n    let closeParensSelectorIndex = queryText.indexOf(')', openParensSelectorIndex);\n\n    // Try search for selector part of an alternate aggregation clause, such as `sum by (l) (m)`\n    if (openParensSelectorIndex === -1) {\n      const closeParensAggregationIndex = queryText.indexOf(')', queryOffset);\n      closeParensSelectorIndex = queryText.indexOf(')', closeParensAggregationIndex + 1);\n      openParensSelectorIndex = queryText.lastIndexOf('(', closeParensSelectorIndex);\n    }\n\n    const result = {\n      suggestions,\n      context: 'context-aggregation',\n    };\n\n    // Suggestions are useless for alternative aggregation clauses without a selector in context\n    if (openParensSelectorIndex === -1) {\n      return result;\n    }\n\n    // Range vector syntax not accounted for by subsequent parse so discard it if present\n    const selectorString = queryText\n      .slice(openParensSelectorIndex + 1, closeParensSelectorIndex)\n      .replace(/\\[[^\\]]+\\]$/, '');\n\n    const selector = parseSelector(selectorString, selectorString.length - 2).selector;\n\n    const series = await this.getSeries(selector);\n    const labelKeys = Object.keys(series);\n    if (labelKeys.length > 0) {\n      const limitInfo = addLimitInfo(labelKeys);\n      suggestions.push({\n        label: `Labels${limitInfo}`,\n        items: labelKeys.map(wrapLabel),\n        searchFunctionType: SearchFunctionType.Fuzzy,\n      });\n    }\n    return result;\n  };\n\n  getLabelCompletionItems = async ({\n    text,\n    wrapperClasses,\n    labelKey,\n    value,\n  }: TypeaheadInput): Promise<TypeaheadOutput> => {\n    if (!value) {\n      return { suggestions: [] };\n    }\n\n    const suggestions: CompletionItemGroup[] = [];\n    const line = value.anchorBlock.getText();\n    const cursorOffset = value.selection.anchor.offset;\n    const suffix = line.substr(cursorOffset);\n    const prefix = line.substr(0, cursorOffset);\n    const isValueStart = text.match(/^(=|=~|!=|!~)/);\n    const isValueEnd = suffix.match(/^\"?[,}]|$/);\n    // Detect cursor in front of value, e.g., {key=|\"}\n    const isPreValue = prefix.match(/(=|=~|!=|!~)$/) && suffix.match(/^\"/);\n\n    // Don't suggest anything at the beginning or inside a value\n    const isValueEmpty = isValueStart && isValueEnd;\n    const hasValuePrefix = isValueEnd && !isValueStart;\n    if ((!isValueEmpty && !hasValuePrefix) || isPreValue) {\n      return { suggestions };\n    }\n\n    // Get normalized selector\n    let selector;\n    let parsedSelector;\n    try {\n      parsedSelector = parseSelector(line, cursorOffset);\n      selector = parsedSelector.selector;\n    } catch {\n      selector = EMPTY_SELECTOR;\n    }\n\n    const containsMetric = selector.includes('__name__=');\n    const existingKeys = parsedSelector ? parsedSelector.labelKeys : [];\n\n    let series: Record<string, string[]> = {};\n    // Query labels for selector\n    if (selector) {\n      series = await this.getSeries(selector, !containsMetric);\n    }\n\n    if (Object.keys(series).length === 0) {\n      console.warn(`Server did not return any values for selector = ${selector}`);\n      return { suggestions };\n    }\n\n    let context: string | undefined;\n\n    if ((text && isValueStart) || wrapperClasses.includes('attr-value')) {\n      // Label values\n      if (labelKey && series[labelKey]) {\n        context = 'context-label-values';\n        const limitInfo = addLimitInfo(series[labelKey]);\n        suggestions.push({\n          label: `Label values for \"${labelKey}\"${limitInfo}`,\n          items: series[labelKey].map(wrapLabel),\n          searchFunctionType: SearchFunctionType.Fuzzy,\n        });\n      }\n    } else {\n      // Label keys\n      const labelKeys = series ? Object.keys(series) : containsMetric ? null : DEFAULT_KEYS;\n\n      if (labelKeys) {\n        const possibleKeys = difference(labelKeys, existingKeys);\n        if (possibleKeys.length) {\n          context = 'context-labels';\n          const newItems = possibleKeys.map((key) => ({ label: key }));\n          const limitInfo = addLimitInfo(newItems);\n          const newSuggestion: CompletionItemGroup = {\n            label: `Labels${limitInfo}`,\n            items: newItems,\n            searchFunctionType: SearchFunctionType.Fuzzy,\n          };\n          suggestions.push(newSuggestion);\n        }\n      }\n    }\n\n    return { context, suggestions };\n  };\n\n  importFromAbstractQuery(labelBasedQuery: AbstractQuery): PromQuery {\n    return toPromLikeQuery(labelBasedQuery);\n  }\n\n  exportToAbstractQuery(query: PromQuery): AbstractQuery {\n    const promQuery = query.expr;\n    if (!promQuery || promQuery.length === 0) {\n      return { refId: query.refId, labelMatchers: [] };\n    }\n    const tokens = Prism.tokenize(promQuery, PromqlSyntax);\n    const labelMatchers: AbstractLabelMatcher[] = extractLabelMatchers(tokens);\n    const nameLabelValue = getNameLabelValue(promQuery, tokens);\n    if (nameLabelValue && nameLabelValue.length > 0) {\n      labelMatchers.push({\n        name: '__name__',\n        operator: AbstractLabelOperator.Equal,\n        value: nameLabelValue,\n      });\n    }\n\n    return {\n      refId: query.refId,\n      labelMatchers,\n    };\n  }\n\n  async getSeries(selector: string, withName?: boolean): Promise<Record<string, string[]>> {\n    if (this.datasource.lookupsDisabled) {\n      return {};\n    }\n    try {\n      if (selector === EMPTY_SELECTOR) {\n        return await this.fetchDefaultSeries();\n      } else {\n        return await this.fetchSeriesLabels(selector, withName);\n      }\n    } catch (error) {\n      // TODO: better error handling\n      console.error(error);\n      return {};\n    }\n  }\n\n  fetchLabelValues = async (key: string): Promise<string[]> => {\n    const params = this.datasource.getTimeRangeParams();\n    const url = `/api/v1/label/${key}/values`;\n    return await this.request(url, [], params);\n  };\n\n  async getLabelValues(key: string): Promise<string[]> {\n    return await this.fetchLabelValues(key);\n  }\n\n  /**\n   * Fetches all label keys\n   */\n  async fetchLabels(): Promise<string[]> {\n    const url = '/api/v1/labels';\n    const params = this.datasource.getTimeRangeParams();\n    this.labelFetchTs = Date.now().valueOf();\n\n    const res = await this.request(url, [], params);\n    if (Array.isArray(res)) {\n      this.labelKeys = res.slice().sort();\n    }\n\n    return [];\n  }\n\n  /**\n   * Fetch labels for a series. This is cached by it's args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchSeriesLabels = async (name: string, withName?: boolean): Promise<Record<string, string[]>> => {\n    const range = this.datasource.getTimeRangeParams();\n    const urlParams = {\n      ...range,\n      'match[]': name,\n    };\n    const url = `/api/v1/series`;\n    // Cache key is a bit different here. We add the `withName` param and also round up to a minute the intervals.\n    // The rounding may seem strange but makes relative intervals like now-1h less prone to need separate request every\n    // millisecond while still actually getting all the keys for the correct interval. This still can create problems\n    // when user does not the newest values for a minute if already cached.\n    const cacheParams = new URLSearchParams({\n      'match[]': name,\n      start: roundSecToMin(parseInt(range.start, 10)).toString(),\n      end: roundSecToMin(parseInt(range.end, 10)).toString(),\n      withName: withName ? 'true' : 'false',\n    });\n\n    const cacheKey = `/api/v1/series?${cacheParams.toString()}`;\n    let value = this.labelsCache.get(cacheKey);\n    if (!value) {\n      const data = await this.request(url, [], urlParams);\n      const { values } = processLabels(data, withName);\n      value = values;\n      this.labelsCache.set(cacheKey, value);\n    }\n    return value;\n  };\n\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries = async (match: string): Promise<Array<Record<string, string>>> => {\n    const url = '/api/v1/series';\n    const range = this.datasource.getTimeRangeParams();\n    const params = { ...range, 'match[]': match };\n    return await this.request(url, {}, params);\n  };\n\n  /**\n   * Fetch this only one as we assume this won't change over time. This is cached differently from fetchSeriesLabels\n   * because we can cache more aggressively here and also we do not want to invalidate this cache the same way as in\n   * fetchSeriesLabels.\n   */\n  fetchDefaultSeries = once(async () => {\n    const values = await Promise.all(DEFAULT_KEYS.map((key) => this.fetchLabelValues(key)));\n    return DEFAULT_KEYS.reduce((acc, key, i) => ({ ...acc, [key]: values[i] }), {});\n  });\n}\n\nfunction getNameLabelValue(promQuery: string, tokens: any): string {\n  let nameLabelValue = '';\n  for (let prop in tokens) {\n    if (typeof tokens[prop] === 'string') {\n      nameLabelValue = tokens[prop] as string;\n      break;\n    }\n  }\n  return nameLabelValue;\n}\n","import { PromMetricsMetadata, PromMetricsMetadataItem } from './types';\nimport { addLabelToQuery } from './add_label_to_query';\nimport { SUGGESTIONS_LIMIT } from './language_provider';\nimport { DataQuery, AbstractQuery, AbstractLabelOperator, AbstractLabelMatcher } from '@grafana/data';\nimport { Token } from 'prismjs';\nimport { invert } from 'lodash';\n\nexport const processHistogramMetrics = (metrics: string[]) => {\n  const resultSet: Set<string> = new Set();\n  const regexp = new RegExp('_bucket($|:)');\n  for (let index = 0; index < metrics.length; index++) {\n    const metric = metrics[index];\n    const isHistogramValue = regexp.test(metric);\n    if (isHistogramValue) {\n      resultSet.add(metric);\n    }\n  }\n  return [...resultSet];\n};\n\nexport function processLabels(labels: Array<{ [key: string]: string }>, withName = false) {\n  // For processing we are going to use sets as they have significantly better performance than arrays\n  // After we process labels, we will convert sets to arrays and return object with label values in arrays\n  const valueSet: { [key: string]: Set<string> } = {};\n  labels.forEach((label) => {\n    const { __name__, ...rest } = label;\n    if (withName) {\n      valueSet['__name__'] = valueSet['__name__'] || new Set();\n      if (!valueSet['__name__'].has(__name__)) {\n        valueSet['__name__'].add(__name__);\n      }\n    }\n\n    Object.keys(rest).forEach((key) => {\n      if (!valueSet[key]) {\n        valueSet[key] = new Set();\n      }\n      if (!valueSet[key].has(rest[key])) {\n        valueSet[key].add(rest[key]);\n      }\n    });\n  });\n\n  // valueArray that we are going to return in the object\n  const valueArray: { [key: string]: string[] } = {};\n  limitSuggestions(Object.keys(valueSet)).forEach((key) => {\n    valueArray[key] = limitSuggestions(Array.from(valueSet[key]));\n  });\n\n  return { values: valueArray, keys: Object.keys(valueArray) };\n}\n\n// const cleanSelectorRegexp = /\\{(\\w+=\"[^\"\\n]*?\")(,\\w+=\"[^\"\\n]*?\")*\\}/;\nexport const selectorRegexp = /\\{[^}]*?(\\}|$)/;\nexport const labelRegexp = /\\b(\\w+)(!?=~?)(\"[^\"\\n]*?\")/g;\nexport function parseSelector(query: string, cursorOffset = 1): { labelKeys: any[]; selector: string } {\n  if (!query.match(selectorRegexp)) {\n    // Special matcher for metrics\n    if (query.match(/^[A-Za-z:][\\w:]*$/)) {\n      return {\n        selector: `{__name__=\"${query}\"}`,\n        labelKeys: ['__name__'],\n      };\n    }\n    throw new Error('Query must contain a selector: ' + query);\n  }\n\n  // Check if inside a selector\n  const prefix = query.slice(0, cursorOffset);\n  const prefixOpen = prefix.lastIndexOf('{');\n  const prefixClose = prefix.lastIndexOf('}');\n  if (prefixOpen === -1) {\n    throw new Error('Not inside selector, missing open brace: ' + prefix);\n  }\n  if (prefixClose > -1 && prefixClose > prefixOpen) {\n    throw new Error('Not inside selector, previous selector already closed: ' + prefix);\n  }\n  const suffix = query.slice(cursorOffset);\n  const suffixCloseIndex = suffix.indexOf('}');\n  const suffixClose = suffixCloseIndex + cursorOffset;\n  const suffixOpenIndex = suffix.indexOf('{');\n  const suffixOpen = suffixOpenIndex + cursorOffset;\n  if (suffixClose === -1) {\n    throw new Error('Not inside selector, missing closing brace in suffix: ' + suffix);\n  }\n  if (suffixOpenIndex > -1 && suffixOpen < suffixClose) {\n    throw new Error('Not inside selector, next selector opens before this one closed: ' + suffix);\n  }\n\n  // Extract clean labels to form clean selector, incomplete labels are dropped\n  const selector = query.slice(prefixOpen, suffixClose);\n  const labels: { [key: string]: { value: string; operator: string } } = {};\n  selector.replace(labelRegexp, (label, key, operator, value) => {\n    const labelOffset = query.indexOf(label);\n    const valueStart = labelOffset + key.length + operator.length + 1;\n    const valueEnd = labelOffset + key.length + operator.length + value.length - 1;\n    // Skip label if cursor is in value\n    if (cursorOffset < valueStart || cursorOffset > valueEnd) {\n      labels[key] = { value, operator };\n    }\n    return '';\n  });\n\n  // Add metric if there is one before the selector\n  const metricPrefix = query.slice(0, prefixOpen);\n  const metricMatch = metricPrefix.match(/[A-Za-z:][\\w:]*$/);\n  if (metricMatch) {\n    labels['__name__'] = { value: `\"${metricMatch[0]}\"`, operator: '=' };\n  }\n\n  // Build sorted selector\n  const labelKeys = Object.keys(labels).sort();\n  const cleanSelector = labelKeys.map((key) => `${key}${labels[key].operator}${labels[key].value}`).join(',');\n\n  const selectorString = ['{', cleanSelector, '}'].join('');\n\n  return { labelKeys, selector: selectorString };\n}\n\nexport function expandRecordingRules(query: string, mapping: { [name: string]: string }): string {\n  const ruleNames = Object.keys(mapping);\n  const rulesRegex = new RegExp(`(\\\\s|^)(${ruleNames.join('|')})(\\\\s|$|\\\\(|\\\\[|\\\\{)`, 'ig');\n  const expandedQuery = query.replace(rulesRegex, (match, pre, name, post) => `${pre}${mapping[name]}${post}`);\n\n  // Split query into array, so if query uses operators, we can correctly add labels to each individual part.\n  const queryArray = expandedQuery.split(/(\\+|\\-|\\*|\\/|\\%|\\^)/);\n\n  // Regex that matches occurrences of ){ or }{ or ]{ which is a sign of incorrecly added labels.\n  const invalidLabelsRegex = /(\\)\\{|\\}\\{|\\]\\{)/;\n  const correctlyExpandedQueryArray = queryArray.map((query) => {\n    return addLabelsToExpression(query, invalidLabelsRegex);\n  });\n\n  return correctlyExpandedQueryArray.join('');\n}\n\nfunction addLabelsToExpression(expr: string, invalidLabelsRegexp: RegExp) {\n  const match = expr.match(invalidLabelsRegexp);\n  if (!match) {\n    return expr;\n  }\n\n  // Split query into 2 parts - before the invalidLabelsRegex match and after.\n  const indexOfRegexMatch = match.index ?? 0;\n  const exprBeforeRegexMatch = expr.substr(0, indexOfRegexMatch + 1);\n  const exprAfterRegexMatch = expr.substr(indexOfRegexMatch + 1);\n\n  // Create arrayOfLabelObjects with label objects that have key, operator and value.\n  const arrayOfLabelObjects: Array<{ key: string; operator: string; value: string }> = [];\n  exprAfterRegexMatch.replace(labelRegexp, (label, key, operator, value) => {\n    arrayOfLabelObjects.push({ key, operator, value });\n    return '';\n  });\n\n  // Loop trough all of the label objects and add them to query.\n  // As a starting point we have valid query without the labels.\n  let result = exprBeforeRegexMatch;\n  arrayOfLabelObjects.filter(Boolean).forEach((obj) => {\n    // Remove extra set of quotes from obj.value\n    const value = obj.value.substr(1, obj.value.length - 2);\n    result = addLabelToQuery(result, obj.key, value, obj.operator);\n  });\n\n  return result;\n}\n\n/**\n * Adds metadata for synthetic metrics for which the API does not provide metadata.\n * See https://github.com/grafana/grafana/issues/22337 for details.\n *\n * @param metadata HELP and TYPE metadata from /api/v1/metadata\n */\nexport function fixSummariesMetadata(metadata: { [metric: string]: PromMetricsMetadataItem[] }): PromMetricsMetadata {\n  if (!metadata) {\n    return metadata;\n  }\n  const baseMetadata: PromMetricsMetadata = {};\n  const summaryMetadata: PromMetricsMetadata = {};\n  for (const metric in metadata) {\n    // NOTE: based on prometheus-documentation, we can receive\n    // multiple metadata-entries for the given metric, it seems\n    // it happens when the same metric is on multiple targets\n    // and their help-text differs\n    // (https://prometheus.io/docs/prometheus/latest/querying/api/#querying-metric-metadata)\n    // for now we just use the first entry.\n    const item = metadata[metric][0];\n    baseMetadata[metric] = item;\n\n    if (item.type === 'histogram') {\n      summaryMetadata[`${metric}_bucket`] = {\n        type: 'counter',\n        help: `Cumulative counters for the observation buckets (${item.help})`,\n      };\n      summaryMetadata[`${metric}_count`] = {\n        type: 'counter',\n        help: `Count of events that have been observed for the histogram metric (${item.help})`,\n      };\n      summaryMetadata[`${metric}_sum`] = {\n        type: 'counter',\n        help: `Total sum of all observed values for the histogram metric (${item.help})`,\n      };\n    }\n    if (item.type === 'summary') {\n      summaryMetadata[`${metric}_count`] = {\n        type: 'counter',\n        help: `Count of events that have been observed for the base metric (${item.help})`,\n      };\n      summaryMetadata[`${metric}_sum`] = {\n        type: 'counter',\n        help: `Total sum of all observed values for the base metric (${item.help})`,\n      };\n    }\n  }\n  // Synthetic series\n  const syntheticMetadata: PromMetricsMetadata = {};\n  syntheticMetadata['ALERTS'] = {\n    type: 'counter',\n    help:\n      'Time series showing pending and firing alerts. The sample value is set to 1 as long as the alert is in the indicated active (pending or firing) state.',\n  };\n\n  return { ...baseMetadata, ...summaryMetadata, ...syntheticMetadata };\n}\n\nexport function roundMsToMin(milliseconds: number): number {\n  return roundSecToMin(milliseconds / 1000);\n}\n\nexport function roundSecToMin(seconds: number): number {\n  return Math.floor(seconds / 60);\n}\n\nexport function limitSuggestions(items: string[]) {\n  return items.slice(0, SUGGESTIONS_LIMIT);\n}\n\nexport function addLimitInfo(items: any[] | undefined): string {\n  return items && items.length >= SUGGESTIONS_LIMIT ? `, limited to the first ${SUGGESTIONS_LIMIT} received items` : '';\n}\n\n// NOTE: the following 2 exported functions are very similar to the prometheus*Escape\n// functions in datasource.ts, but they are not exactly the same algorithm, and we found\n// no way to reuse one in the another or vice versa.\n\n// Prometheus regular-expressions use the RE2 syntax (https://github.com/google/re2/wiki/Syntax),\n// so every character that matches something in that list has to be escaped.\n// the list of metacharacters is: *+?()|\\.[]{}^$\n// we make a javascript regular expression that matches those characters:\nconst RE2_METACHARACTERS = /[*+?()|\\\\.\\[\\]{}^$]/g;\nfunction escapePrometheusRegexp(value: string): string {\n  return value.replace(RE2_METACHARACTERS, '\\\\$&');\n}\n\n// based on the openmetrics-documentation, the 3 symbols we have to handle are:\n// - \\n ... the newline character\n// - \\  ... the backslash character\n// - \"  ... the double-quote character\nexport function escapeLabelValueInExactSelector(labelValue: string): string {\n  return labelValue.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"');\n}\n\nexport function escapeLabelValueInRegexSelector(labelValue: string): string {\n  return escapeLabelValueInExactSelector(escapePrometheusRegexp(labelValue));\n}\n\nconst FromPromLikeMap: Record<string, AbstractLabelOperator> = {\n  '=': AbstractLabelOperator.Equal,\n  '!=': AbstractLabelOperator.NotEqual,\n  '=~': AbstractLabelOperator.EqualRegEx,\n  '!~': AbstractLabelOperator.NotEqualRegEx,\n};\nconst ToPromLikeMap: Record<AbstractLabelOperator, string> = invert(FromPromLikeMap) as Record<\n  AbstractLabelOperator,\n  string\n>;\n\nexport function toPromLikeQuery(labelBasedQuery: AbstractQuery): PromLikeQuery {\n  const expr = labelBasedQuery.labelMatchers\n    .map((selector: AbstractLabelMatcher) => {\n      const operator = ToPromLikeMap[selector.operator];\n      if (operator) {\n        return `${selector.name}${operator}\"${selector.value}\"`;\n      } else {\n        return '';\n      }\n    })\n    .filter((e: string) => e !== '')\n    .join(', ');\n\n  return {\n    refId: labelBasedQuery.refId,\n    expr: expr ? `{${expr}}` : '',\n    range: true,\n  };\n}\n\nexport interface PromLikeQuery extends DataQuery {\n  expr: string;\n  range: boolean;\n}\n\nexport function extractLabelMatchers(tokens: Array<string | Token>): AbstractLabelMatcher[] {\n  const labelMatchers: AbstractLabelMatcher[] = [];\n\n  for (let prop in tokens) {\n    if (tokens[prop] instanceof Token) {\n      let token: Token = tokens[prop] as Token;\n      if (token.type === 'context-labels') {\n        let labelKey = '';\n        let labelValue = '';\n        let labelOperator = '';\n        let contentTokens: any[] = token.content as any[];\n        for (let currentToken in contentTokens) {\n          if (typeof contentTokens[currentToken] === 'string') {\n            let currentStr: string;\n            currentStr = contentTokens[currentToken] as string;\n            if (currentStr === '=' || currentStr === '!=' || currentStr === '=~' || currentStr === '!~') {\n              labelOperator = currentStr;\n            }\n          } else if (contentTokens[currentToken] instanceof Token) {\n            switch (contentTokens[currentToken].type) {\n              case 'label-key':\n                labelKey = contentTokens[currentToken].content as string;\n                break;\n              case 'label-value':\n                labelValue = contentTokens[currentToken].content as string;\n                labelValue = labelValue.substring(1, labelValue.length - 1);\n                const labelComparator = FromPromLikeMap[labelOperator];\n                if (labelComparator) {\n                  labelMatchers.push({ name: labelKey, operator: labelComparator, value: labelValue });\n                }\n                break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return labelMatchers;\n}\n","import { useEffect, useRef } from 'react';\nexport default function usePrevious(state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n}\n","'use strict'\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = require('yallist')\n\nconst MAX = Symbol('max')\nconst LENGTH = Symbol('length')\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator')\nconst ALLOW_STALE = Symbol('allowStale')\nconst MAX_AGE = Symbol('maxAge')\nconst DISPOSE = Symbol('dispose')\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')\nconst LRU_LIST = Symbol('lruList')\nconst CACHE = Symbol('cache')\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')\n\nconst naiveLength = () => 1\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor (options) {\n    if (typeof options === 'number')\n      options = { max: options }\n\n    if (!options)\n      options = {}\n\n    if (options.max && (typeof options.max !== 'number' || options.max < 0))\n      throw new TypeError('max must be a non-negative number')\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity\n\n    const lc = options.length || naiveLength\n    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc\n    this[ALLOW_STALE] = options.stale || false\n    if (options.maxAge && typeof options.maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n    this[MAX_AGE] = options.maxAge || 0\n    this[DISPOSE] = options.dispose\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false\n    this.reset()\n  }\n\n  // resize the cache when the max changes.\n  set max (mL) {\n    if (typeof mL !== 'number' || mL < 0)\n      throw new TypeError('max must be a non-negative number')\n\n    this[MAX] = mL || Infinity\n    trim(this)\n  }\n  get max () {\n    return this[MAX]\n  }\n\n  set allowStale (allowStale) {\n    this[ALLOW_STALE] = !!allowStale\n  }\n  get allowStale () {\n    return this[ALLOW_STALE]\n  }\n\n  set maxAge (mA) {\n    if (typeof mA !== 'number')\n      throw new TypeError('maxAge must be a non-negative number')\n\n    this[MAX_AGE] = mA\n    trim(this)\n  }\n  get maxAge () {\n    return this[MAX_AGE]\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator (lC) {\n    if (typeof lC !== 'function')\n      lC = naiveLength\n\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC\n      this[LENGTH] = 0\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)\n        this[LENGTH] += hit.length\n      })\n    }\n    trim(this)\n  }\n  get lengthCalculator () { return this[LENGTH_CALCULATOR] }\n\n  get length () { return this[LENGTH] }\n  get itemCount () { return this[LRU_LIST].length }\n\n  rforEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev\n      forEachStep(this, fn, walker, thisp)\n      walker = prev\n    }\n  }\n\n  forEach (fn, thisp) {\n    thisp = thisp || this\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next\n      forEachStep(this, fn, walker, thisp)\n      walker = next\n    }\n  }\n\n  keys () {\n    return this[LRU_LIST].toArray().map(k => k.key)\n  }\n\n  values () {\n    return this[LRU_LIST].toArray().map(k => k.value)\n  }\n\n  reset () {\n    if (this[DISPOSE] &&\n        this[LRU_LIST] &&\n        this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))\n    }\n\n    this[CACHE] = new Map() // hash of items by key\n    this[LRU_LIST] = new Yallist() // list of items in order of use recency\n    this[LENGTH] = 0 // length of items in the list\n  }\n\n  dump () {\n    return this[LRU_LIST].map(hit =>\n      isStale(this, hit) ? false : {\n        k: hit.key,\n        v: hit.value,\n        e: hit.now + (hit.maxAge || 0)\n      }).toArray().filter(h => h)\n  }\n\n  dumpLru () {\n    return this[LRU_LIST]\n  }\n\n  set (key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE]\n\n    if (maxAge && typeof maxAge !== 'number')\n      throw new TypeError('maxAge must be a number')\n\n    const now = maxAge ? Date.now() : 0\n    const len = this[LENGTH_CALCULATOR](value, key)\n\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key))\n        return false\n      }\n\n      const node = this[CACHE].get(key)\n      const item = node.value\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET])\n          this[DISPOSE](key, item.value)\n      }\n\n      item.now = now\n      item.maxAge = maxAge\n      item.value = value\n      this[LENGTH] += len - item.length\n      item.length = len\n      this.get(key)\n      trim(this)\n      return true\n    }\n\n    const hit = new Entry(key, value, len, now, maxAge)\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE])\n        this[DISPOSE](key, value)\n\n      return false\n    }\n\n    this[LENGTH] += hit.length\n    this[LRU_LIST].unshift(hit)\n    this[CACHE].set(key, this[LRU_LIST].head)\n    trim(this)\n    return true\n  }\n\n  has (key) {\n    if (!this[CACHE].has(key)) return false\n    const hit = this[CACHE].get(key).value\n    return !isStale(this, hit)\n  }\n\n  get (key) {\n    return get(this, key, true)\n  }\n\n  peek (key) {\n    return get(this, key, false)\n  }\n\n  pop () {\n    const node = this[LRU_LIST].tail\n    if (!node)\n      return null\n\n    del(this, node)\n    return node.value\n  }\n\n  del (key) {\n    del(this, this[CACHE].get(key))\n  }\n\n  load (arr) {\n    // reset the cache\n    this.reset()\n\n    const now = Date.now()\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l]\n      const expiresAt = hit.e || 0\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v)\n      else {\n        const maxAge = expiresAt - now\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge)\n        }\n      }\n    }\n  }\n\n  prune () {\n    this[CACHE].forEach((value, key) => get(this, key, false))\n  }\n}\n\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key)\n  if (node) {\n    const hit = node.value\n    if (isStale(self, hit)) {\n      del(self, node)\n      if (!self[ALLOW_STALE])\n        return undefined\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET])\n          node.value.now = Date.now()\n        self[LRU_LIST].unshiftNode(node)\n      }\n    }\n    return hit.value\n  }\n}\n\nconst isStale = (self, hit) => {\n  if (!hit || (!hit.maxAge && !self[MAX_AGE]))\n    return false\n\n  const diff = Date.now() - hit.now\n  return hit.maxAge ? diff > hit.maxAge\n    : self[MAX_AGE] && (diff > self[MAX_AGE])\n}\n\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail;\n      self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev\n      del(self, walker)\n      walker = prev\n    }\n  }\n}\n\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value\n    if (self[DISPOSE])\n      self[DISPOSE](hit.key, hit.value)\n\n    self[LENGTH] -= hit.length\n    self[CACHE].delete(hit.key)\n    self[LRU_LIST].removeNode(node)\n  }\n}\n\nclass Entry {\n  constructor (key, value, length, now, maxAge) {\n    this.key = key\n    this.value = value\n    this.length = length\n    this.now = now\n    this.maxAge = maxAge || 0\n  }\n}\n\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value\n  if (isStale(self, hit)) {\n    del(self, node)\n    if (!self[ALLOW_STALE])\n      hit = undefined\n  }\n  if (hit)\n    fn.call(thisp, hit.value, hit.key, self)\n}\n\nmodule.exports = LRUCache\n","'use strict'\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value\n    }\n  }\n}\n","'use strict'\nmodule.exports = Yallist\n\nYallist.Node = Node\nYallist.create = Yallist\n\nfunction Yallist (list) {\n  var self = this\n  if (!(self instanceof Yallist)) {\n    self = new Yallist()\n  }\n\n  self.tail = null\n  self.head = null\n  self.length = 0\n\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item)\n    })\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i])\n    }\n  }\n\n  return self\n}\n\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list')\n  }\n\n  var next = node.next\n  var prev = node.prev\n\n  if (next) {\n    next.prev = prev\n  }\n\n  if (prev) {\n    prev.next = next\n  }\n\n  if (node === this.head) {\n    this.head = next\n  }\n  if (node === this.tail) {\n    this.tail = prev\n  }\n\n  node.list.length--\n  node.next = null\n  node.prev = null\n  node.list = null\n\n  return next\n}\n\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var head = this.head\n  node.list = this\n  node.next = head\n  if (head) {\n    head.prev = node\n  }\n\n  this.head = node\n  if (!this.tail) {\n    this.tail = node\n  }\n  this.length++\n}\n\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return\n  }\n\n  if (node.list) {\n    node.list.removeNode(node)\n  }\n\n  var tail = this.tail\n  node.list = this\n  node.prev = tail\n  if (tail) {\n    tail.next = node\n  }\n\n  this.tail = node\n  if (!this.head) {\n    this.head = node\n  }\n  this.length++\n}\n\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i])\n  }\n  return this.length\n}\n\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined\n  }\n\n  var res = this.tail.value\n  this.tail = this.tail.prev\n  if (this.tail) {\n    this.tail.next = null\n  } else {\n    this.head = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined\n  }\n\n  var res = this.head.value\n  this.head = this.head.next\n  if (this.head) {\n    this.head.prev = null\n  } else {\n    this.tail = null\n  }\n  this.length--\n  return res\n}\n\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.next\n  }\n}\n\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this)\n    walker = walker.prev\n  }\n}\n\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev\n  }\n  if (i === n && walker !== null) {\n    return walker.value\n  }\n}\n\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.next\n  }\n  return res\n}\n\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this\n  var res = new Yallist()\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this))\n    walker = walker.prev\n  }\n  return res\n}\n\nYallist.prototype.reduce = function (fn, initial) {\n  var acc\n  var walker = this.head\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.head) {\n    walker = this.head.next\n    acc = this.head.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.next\n  }\n\n  return acc\n}\n\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc\n  var walker = this.tail\n  if (arguments.length > 1) {\n    acc = initial\n  } else if (this.tail) {\n    walker = this.tail.prev\n    acc = this.tail.value\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value')\n  }\n\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i)\n    walker = walker.prev\n  }\n\n  return acc\n}\n\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.next\n  }\n  return arr\n}\n\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length)\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value\n    walker = walker.prev\n  }\n  return arr\n}\n\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length\n  if (to < 0) {\n    to += this.length\n  }\n  from = from || 0\n  if (from < 0) {\n    from += this.length\n  }\n  var ret = new Yallist()\n  if (to < from || to < 0) {\n    return ret\n  }\n  if (from < 0) {\n    from = 0\n  }\n  if (to > this.length) {\n    to = this.length\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value)\n  }\n  return ret\n}\n\nYallist.prototype.splice = function (start, deleteCount, ...nodes) {\n  if (start > this.length) {\n    start = this.length - 1\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next\n  }\n\n  var ret = []\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value)\n    walker = this.removeNode(walker)\n  }\n  if (walker === null) {\n    walker = this.tail\n  }\n\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev\n  }\n\n  for (var i = 0; i < nodes.length; i++) {\n    walker = insert(this, walker, nodes[i])\n  }\n  return ret;\n}\n\nYallist.prototype.reverse = function () {\n  var head = this.head\n  var tail = this.tail\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev\n    walker.prev = walker.next\n    walker.next = p\n  }\n  this.head = tail\n  this.tail = head\n  return this\n}\n\nfunction insert (self, node, value) {\n  var inserted = node === self.head ?\n    new Node(value, null, node, self) :\n    new Node(value, node, node.next, self)\n\n  if (inserted.next === null) {\n    self.tail = inserted\n  }\n  if (inserted.prev === null) {\n    self.head = inserted\n  }\n\n  self.length++\n\n  return inserted\n}\n\nfunction push (self, item) {\n  self.tail = new Node(item, self.tail, null, self)\n  if (!self.head) {\n    self.head = self.tail\n  }\n  self.length++\n}\n\nfunction unshift (self, item) {\n  self.head = new Node(item, null, self.head, self)\n  if (!self.tail) {\n    self.tail = self.head\n  }\n  self.length++\n}\n\nfunction Node (value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list)\n  }\n\n  this.list = list\n  this.value = value\n\n  if (prev) {\n    prev.next = this\n    this.prev = prev\n  } else {\n    this.prev = null\n  }\n\n  if (next) {\n    next.prev = this\n    this.next = next\n  } else {\n    this.next = null\n  }\n}\n\ntry {\n  // add if support for Symbol.iterator is present\n  require('./iterator.js')(Yallist)\n} catch (er) {}\n"],"names":["builtInWords","PROM_KEYWORDS","OPERATORS","LOGICAL_OPERATORS","metricsAndKeywordsRegexp","selectorRegexp","addLabelToQuery","query","key","value","operator","hasNoMetrics","Error","transformedValue","Infinity","toString","previousWord","replace","match","word","offset","isMetric","insideSelector","text","position","openChar","closeChar","nextSelectorStart","slice","indexOf","nextSelectorEnd","isPositionInsideChars","previousWordIsKeyWord","isColonBounded","endsWith","startsWithQuote","isTemplateVariable","isTimeUnit","includes","Boolean","Number","isWordMetric","exec","parts","lastIndex","suffix","prefix","index","length","push","selectorWithLabel","addLabelToSelector","join","labelRegexp","selector","labelKey","labelValue","labelOperator","parsedLabels","operatorForLabelKey","chain","uniqWith","isEqual","compact","sortBy","map","DEFAULT_KEYS","SUGGESTIONS_LIMIT","wrapLabel","label","setFunctionKind","suggestion","kind","PREFIX_DELIMITER_REGEX","PromQlLanguageProvider","LanguageProvider","constructor","datasource","initialValues","super","LRU","async","url","defaultValue","params","metadataRequest","data","error","console","this","lookupsDisabled","fetchLabels","metrics","fetchLabelValues","metricsMetadata","fixSummariesMetadata","request","histogramMetrics","processHistogramMetrics","sort","wrapperClasses","context","emptyResult","suggestions","empty","document","selectedLines","getTextsAtRange","selection","currentLine","size","first","getText","nextCharacter","anchor","tokenRecognized","prefixUnrecognized","noSuffix","safePrefix","operatorsPattern","isNextOperand","getRangeCompletionItems","getLabelCompletionItems","getAggregationCompletionItems","getEmptyCompletionItems","getBeginningCompletionItems","getTermCompletionItems","history","historyItems","h","expr","filter","uniq","take","item","cutoffTs","Date","now","historyForItem","ts","count","recent","hint","dateTime","fromNow","documentation","addHistoryMetadata","searchFunctionType","SearchFunctionType","skipSort","items","FUNCTIONS","m","metric","metadata","type","help","toUpperCase","addMetricsMetadata","queryOffset","queryText","getBlocks","reduce","block","undefined","blockText","anchorBlock","openParensAggregationIndex","lastIndexOf","openParensSelectorIndex","closeParensSelectorIndex","closeParensAggregationIndex","result","selectorString","parseSelector","series","getSeries","labelKeys","Object","keys","limitInfo","addLimitInfo","line","cursorOffset","substr","isValueStart","isValueEnd","isPreValue","parsedSelector","containsMetric","existingKeys","warn","possibleKeys","difference","newItems","newSuggestion","getTimeRangeParams","name","withName","range","urlParams","cacheKey","URLSearchParams","start","roundSecToMin","parseInt","end","labelsCache","get","values","processLabels","set","once","Promise","all","acc","i","timeRange","assign","cleanText","s","split","pop","trimLeft","syntax","PromqlSyntax","getLabelKeys","RATE_RANGES","importFromAbstractQuery","labelBasedQuery","toPromLikeQuery","exportToAbstractQuery","promQuery","refId","labelMatchers","tokens","Prism","extractLabelMatchers","nameLabelValue","prop","getNameLabelValue","AbstractLabelOperator","fetchDefaultSeries","fetchSeriesLabels","labelFetchTs","valueOf","res","Array","isArray","resultSet","Set","regexp","RegExp","test","add","labels","valueSet","forEach","__name__","rest","has","valueArray","limitSuggestions","from","prefixOpen","prefixClose","suffixCloseIndex","suffixClose","suffixOpenIndex","suffixOpen","labelOffset","valueStart","valueEnd","metricPrefix","metricMatch","cleanSelector","expandRecordingRules","mapping","ruleNames","rulesRegex","queryArray","pre","post","invalidLabelsRegex","correctlyExpandedQueryArray","invalidLabelsRegexp","indexOfRegexMatch","exprBeforeRegexMatch","exprAfterRegexMatch","arrayOfLabelObjects","obj","addLabelsToExpression","baseMetadata","summaryMetadata","syntheticMetadata","roundMsToMin","milliseconds","seconds","Math","floor","RE2_METACHARACTERS","escapeLabelValueInExactSelector","escapeLabelValueInRegexSelector","FromPromLikeMap","ToPromLikeMap","invert","e","Token","token","contentTokens","content","currentToken","currentStr","substring","labelComparator","usePrevious","state","ref","useRef","useEffect","current","Yallist","MAX","Symbol","LENGTH","LENGTH_CALCULATOR","ALLOW_STALE","MAX_AGE","DISPOSE","NO_DISPOSE_ON_SET","LRU_LIST","CACHE","UPDATE_AGE_ON_GET","naiveLength","self","doUse","node","hit","isStale","del","unshiftNode","maxAge","diff","trim","walker","tail","prev","delete","removeNode","Entry","forEachStep","fn","thisp","call","module","exports","options","max","TypeError","lc","stale","dispose","noDisposeOnSet","updateAgeOnGet","reset","mL","allowStale","mA","lengthCalculator","lC","itemCount","rforEach","head","next","toArray","k","Map","dump","v","dumpLru","len","unshift","peek","load","arr","l","expiresAt","prune","prototype","iterator","list","arguments","insert","inserted","Node","create","pushNode","shift","forEachReverse","n","getReverse","mapReverse","initial","reduceReverse","toArrayReverse","to","ret","sliceReverse","splice","deleteCount","nodes","reverse","p","er"],"sourceRoot":""}