{"version":3,"file":"3378.44e4de8a0bb9f2fbf136.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/MatcherFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsActionButtons.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsAnnotations.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsDataSources.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Expression.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsExpression.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/AlertInstanceStateFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsMatchingInstances.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleHealth.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleState.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRuleNamespaces.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useFolder.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useIsRuleEditable.ts"],"sourcesContent":["import React, { FormEvent } from 'react';\nimport { Label, Tooltip, Input, Icon, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  className?: string;\n  queryString?: string;\n  onFilterChange: (filterString: string) => void;\n}\n\nexport const MatcherFilter = ({ className, onFilterChange, queryString }: Props) => {\n  const styles = useStyles2(getStyles);\n  const handleSearchChange = (e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    onFilterChange(target.value);\n  };\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={className}>\n      <Label>\n        <Tooltip\n          content={\n            <div>\n              Filter alerts using label querying, ex:\n              <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n            </div>\n          }\n        >\n          <Icon className={styles.icon} name=\"info-circle\" size=\"xs\" />\n        </Tooltip>\n        Search by label\n      </Label>\n      <Input\n        placeholder=\"Search\"\n        defaultValue={queryString}\n        onChange={handleSearchChange}\n        data-testid=\"search-query-input\"\n        prefix={searchIcon}\n        className={styles.inputWidth}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  inputWidth: css`\n    width: 340px;\n    flex-grow: 0;\n  `,\n});\n","import React, { FC, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { css } from '@emotion/css';\nimport { AppEvents, GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, ConfirmModal, ClipboardButton, HorizontalGroup, LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { appEvents } from 'app/core/core';\nimport { useIsRuleEditable } from '../../hooks/useIsRuleEditable';\nimport { Annotation } from '../../utils/constants';\nimport { getRulesSourceName, isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { createExploreLink, createViewLink, makeSilenceLink } from '../../utils/misc';\nimport * as ruleId from '../../utils/rule-id';\nimport { deleteRuleAction } from '../../state/actions';\nimport { CombinedRule, RulesSource } from 'app/types/unified-alerting';\nimport { getAlertmanagerByUid } from '../../utils/alertmanager';\n\ninterface Props {\n  rule: CombinedRule;\n  rulesSource: RulesSource;\n}\n\nexport const RuleDetailsActionButtons: FC<Props> = ({ rule, rulesSource }) => {\n  const dispatch = useDispatch();\n  const location = useLocation();\n  const style = useStyles2(getStyles);\n  const { namespace, group, rulerRule } = rule;\n  const [ruleToDelete, setRuleToDelete] = useState<CombinedRule>();\n\n  const alertmanagerSourceName = isGrafanaRulesSource(rulesSource)\n    ? rulesSource\n    : getAlertmanagerByUid(rulesSource.jsonData.alertmanagerUid)?.name;\n\n  const leftButtons: JSX.Element[] = [];\n  const rightButtons: JSX.Element[] = [];\n\n  const { isEditable } = useIsRuleEditable(getRulesSourceName(rulesSource), rulerRule);\n  const returnTo = location.pathname + location.search;\n  const isViewMode = inViewMode(location.pathname);\n\n  const deleteRule = () => {\n    if (ruleToDelete && ruleToDelete.rulerRule) {\n      const identifier = ruleId.fromRulerRule(\n        getRulesSourceName(ruleToDelete.namespace.rulesSource),\n        ruleToDelete.namespace.name,\n        ruleToDelete.group.name,\n        ruleToDelete.rulerRule\n      );\n\n      dispatch(deleteRuleAction(identifier, { navigateTo: isViewMode ? '/alerting/list' : undefined }));\n      setRuleToDelete(undefined);\n    }\n  };\n\n  const buildShareUrl = () => {\n    if (isCloudRulesSource(rulesSource)) {\n      const ruleUrl = `${encodeURIComponent(rulesSource.name)}/${encodeURIComponent(rule.name)}`;\n      return `${config.appUrl}${config.appSubUrl}/alerting/${ruleUrl}/find`;\n    }\n\n    return window.location.href.split('?')[0];\n  };\n\n  // explore does not support grafana rule queries atm\n  if (isCloudRulesSource(rulesSource) && contextSrv.isEditor) {\n    leftButtons.push(\n      <LinkButton\n        className={style.button}\n        size=\"xs\"\n        key=\"explore\"\n        variant=\"primary\"\n        icon=\"chart-line\"\n        target=\"__blank\"\n        href={createExploreLink(rulesSource.name, rule.query)}\n      >\n        See graph\n      </LinkButton>\n    );\n  }\n  if (rule.annotations[Annotation.runbookURL]) {\n    leftButtons.push(\n      <LinkButton\n        className={style.button}\n        size=\"xs\"\n        key=\"runbook\"\n        variant=\"primary\"\n        icon=\"book\"\n        target=\"__blank\"\n        href={rule.annotations[Annotation.runbookURL]}\n      >\n        View runbook\n      </LinkButton>\n    );\n  }\n  if (rule.annotations[Annotation.dashboardUID]) {\n    const dashboardUID = rule.annotations[Annotation.dashboardUID];\n    if (dashboardUID) {\n      leftButtons.push(\n        <LinkButton\n          className={style.button}\n          size=\"xs\"\n          key=\"dashboard\"\n          variant=\"primary\"\n          icon=\"apps\"\n          target=\"__blank\"\n          href={`d/${encodeURIComponent(dashboardUID)}`}\n        >\n          Go to dashboard\n        </LinkButton>\n      );\n      const panelId = rule.annotations[Annotation.panelID];\n      if (panelId) {\n        leftButtons.push(\n          <LinkButton\n            className={style.button}\n            size=\"xs\"\n            key=\"panel\"\n            variant=\"primary\"\n            icon=\"apps\"\n            target=\"__blank\"\n            href={`d/${encodeURIComponent(dashboardUID)}?viewPanel=${encodeURIComponent(panelId)}`}\n          >\n            Go to panel\n          </LinkButton>\n        );\n      }\n    }\n  }\n\n  if (alertmanagerSourceName) {\n    leftButtons.push(\n      <LinkButton\n        className={style.button}\n        size=\"xs\"\n        key=\"silence\"\n        icon=\"bell-slash\"\n        target=\"__blank\"\n        href={makeSilenceLink(alertmanagerSourceName, rule)}\n      >\n        Silence\n      </LinkButton>\n    );\n  }\n\n  if (!isViewMode) {\n    rightButtons.push(\n      <LinkButton\n        className={style.button}\n        size=\"xs\"\n        key=\"view\"\n        variant=\"secondary\"\n        icon=\"eye\"\n        href={createViewLink(rulesSource, rule, returnTo)}\n      >\n        View\n      </LinkButton>\n    );\n  }\n\n  if (isEditable && rulerRule) {\n    const sourceName = getRulesSourceName(rulesSource);\n    const identifier = ruleId.fromRulerRule(sourceName, namespace.name, group.name, rulerRule);\n\n    const editURL = urlUtil.renderUrl(\n      `${config.appSubUrl}/alerting/${encodeURIComponent(ruleId.stringifyIdentifier(identifier))}/edit`,\n      {\n        returnTo,\n      }\n    );\n\n    if (isViewMode) {\n      rightButtons.push(\n        <ClipboardButton\n          key=\"copy\"\n          onClipboardCopy={() => {\n            appEvents.emit(AppEvents.alertSuccess, ['URL copied!']);\n          }}\n          onClipboardError={(e) => {\n            appEvents.emit(AppEvents.alertError, ['Error while copying URL', e.text]);\n          }}\n          className={style.button}\n          size=\"sm\"\n          getText={buildShareUrl}\n        >\n          Copy link to rule\n        </ClipboardButton>\n      );\n    }\n\n    rightButtons.push(\n      <LinkButton className={style.button} size=\"xs\" key=\"edit\" variant=\"secondary\" icon=\"pen\" href={editURL}>\n        Edit\n      </LinkButton>,\n      <Button\n        className={style.button}\n        size=\"xs\"\n        type=\"button\"\n        key=\"delete\"\n        variant=\"secondary\"\n        icon=\"trash-alt\"\n        onClick={() => setRuleToDelete(rule)}\n      >\n        Delete\n      </Button>\n    );\n  }\n  if (leftButtons.length || rightButtons.length) {\n    return (\n      <>\n        <div className={style.wrapper}>\n          <HorizontalGroup width=\"auto\">{leftButtons.length ? leftButtons : <div />}</HorizontalGroup>\n          <HorizontalGroup width=\"auto\">{rightButtons.length ? rightButtons : <div />}</HorizontalGroup>\n        </div>\n        {!!ruleToDelete && (\n          <ConfirmModal\n            isOpen={true}\n            title=\"Delete rule\"\n            body=\"Deleting this rule will permanently remove it from your alert rule list. Are you sure you want to delete this rule?\"\n            confirmText=\"Yes, delete\"\n            icon=\"exclamation-triangle\"\n            onConfirm={deleteRule}\n            onDismiss={() => setRuleToDelete(undefined)}\n          />\n        )}\n      </>\n    );\n  }\n\n  return null;\n};\n\nfunction inViewMode(pathname: string): boolean {\n  return pathname.endsWith('/view');\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    padding: ${theme.spacing(2)} 0;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  button: css`\n    height: 24px;\n    margin-top: ${theme.spacing(1)};\n    font-size: ${theme.typography.size.sm};\n  `,\n});\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\n\ntype Props = {\n  annotations: Array<[string, string]>;\n};\n\nexport function RuleDetailsAnnotations(props: Props): JSX.Element | null {\n  const { annotations } = props;\n  const styles = useStyles2(getStyles);\n\n  if (annotations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={styles.annotations}>\n      {annotations.map(([key, value]) => (\n        <AnnotationDetailsField key={key} annotationKey={key} value={value} />\n      ))}\n    </div>\n  );\n}\n\nconst getStyles = () => ({\n  annotations: css`\n    margin-top: 46px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\nimport { ExpressionDatasourceUID } from 'app/features/expressions/ExpressionDatasource';\nimport { CombinedRule, RulesSource } from 'app/types/unified-alerting';\nimport React, { useMemo } from 'react';\nimport { isCloudRulesSource } from '../../utils/datasource';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { DetailsField } from '../DetailsField';\n\ntype Props = {\n  rule: CombinedRule;\n  rulesSource: RulesSource;\n};\n\nexport function RuleDetailsDataSources(props: Props): JSX.Element | null {\n  const { rulesSource, rule } = props;\n  const styles = useStyles2(getStyles);\n\n  const dataSources: Array<{ name: string; icon?: string }> = useMemo(() => {\n    if (isCloudRulesSource(rulesSource)) {\n      return [{ name: rulesSource.name, icon: rulesSource.meta.info.logos.small }];\n    }\n\n    if (isGrafanaRulerRule(rule.rulerRule)) {\n      const { data } = rule.rulerRule.grafana_alert;\n      const unique = data.reduce((dataSources, query) => {\n        const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n\n        if (!ds || ds.uid === ExpressionDatasourceUID) {\n          return dataSources;\n        }\n\n        dataSources[ds.name] = { name: ds.name, icon: ds.meta.info.logos.small };\n        return dataSources;\n      }, {} as Record<string, { name: string; icon?: string }>);\n\n      return Object.values(unique);\n    }\n\n    return [];\n  }, [rule, rulesSource]);\n\n  if (dataSources.length === 0) {\n    return null;\n  }\n\n  return (\n    <DetailsField label=\"Data source\">\n      {dataSources.map(({ name, icon }, index) => (\n        <div key={name}>\n          {icon && (\n            <>\n              <img alt={`${name} datasource logo`} className={styles.dataSourceIcon} src={icon} />{' '}\n            </>\n          )}\n          {name}\n        </div>\n      ))}\n    </DetailsField>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  const size = theme.spacing(2);\n\n  return {\n    dataSourceIcon: css`\n      width: ${size};\n      height: ${size};\n    `,\n  };\n}\n","import { Editor } from '@grafana/slate-react';\nimport React, { FC, useMemo } from 'react';\nimport PromqlSyntax from 'app/plugins/datasource/prometheus/promql';\nimport LogqlSyntax from 'app/plugins/datasource/loki/syntax';\nimport { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport { makeValue, SlatePrism, useStyles } from '@grafana/ui';\nimport { css, cx } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { RulesSource } from 'app/types/unified-alerting';\nimport { DataSourceType, isCloudRulesSource } from '../utils/datasource';\nimport { Well } from './Well';\n\ninterface Props {\n  expression: string;\n  rulesSource: RulesSource;\n}\n\nexport const HighlightedQuery: FC<{ language: 'promql' | 'logql'; expr: string }> = ({ language, expr }) => {\n  const plugins = useMemo(\n    () => [\n      SlatePrism(\n        {\n          onlyIn: (node: any) => node.type === 'code_block',\n          getSyntax: () => language,\n        },\n        { ...(prismLanguages as LanguageMap), [language]: language === 'logql' ? LogqlSyntax : PromqlSyntax }\n      ),\n    ],\n    [language]\n  );\n\n  const slateValue = useMemo(() => makeValue(expr), [expr]);\n\n  return <Editor plugins={plugins} value={slateValue} readOnly={true} />;\n};\n\nexport const Expression: FC<Props> = ({ expression: query, rulesSource }) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <Well className={cx(styles.well, 'slate-query-field')}>\n      {isCloudRulesSource(rulesSource) ? (\n        <HighlightedQuery expr={query} language={rulesSource.type === DataSourceType.Loki ? 'logql' : 'promql'} />\n      ) : (\n        query\n      )}\n    </Well>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme) => ({\n  well: css`\n    font-family: ${theme.typography.fontFamily.monospace};\n  `,\n});\n","import React from 'react';\nimport { css, cx } from '@emotion/css';\nimport { CombinedRule, RulesSource } from 'app/types/unified-alerting';\nimport { isCloudRulesSource } from '../../utils/datasource';\nimport { DetailsField } from '../DetailsField';\nimport { Expression } from '../Expression';\n\ntype Props = {\n  rule: CombinedRule;\n  rulesSource: RulesSource;\n  annotations: Array<[string, string]>;\n};\n\nexport function RuleDetailsExpression(props: Props): JSX.Element | null {\n  const { annotations, rulesSource, rule } = props;\n  const styles = getStyles();\n\n  if (!isCloudRulesSource(rulesSource)) {\n    return null;\n  }\n\n  return (\n    <DetailsField label=\"Expression\" horizontal={true} className={cx({ [styles.exprRow]: !!annotations.length })}>\n      <Expression expression={rule.query} rulesSource={rulesSource} />\n    </DetailsField>\n  );\n}\n\nconst getStyles = () => ({\n  exprRow: css`\n    margin-bottom: 46px;\n  `,\n});\n","import React from 'react';\nimport { RadioButtonGroup, Label } from '@grafana/ui';\nimport { GrafanaAlertState } from 'app/types/unified-alerting-dto';\n\ninterface Props {\n  className?: string;\n  stateFilter?: GrafanaAlertState;\n  onStateFilterChange: (value: GrafanaAlertState | undefined) => void;\n}\n\nexport const AlertInstanceStateFilter = ({ className, onStateFilterChange, stateFilter }: Props) => {\n  const stateOptions = Object.values(GrafanaAlertState).map((value) => ({\n    label: value,\n    value,\n  }));\n\n  return (\n    <div className={className}>\n      <Label>State</Label>\n      <RadioButtonGroup\n        options={stateOptions}\n        value={stateFilter}\n        onChange={onStateFilterChange}\n        onClick={(v) => {\n          if (v === stateFilter) {\n            onStateFilterChange(undefined);\n          }\n        }}\n      />\n    </div>\n  );\n};\n","import { Alert, Rule } from 'app/types/unified-alerting';\nimport React, { useMemo, useState } from 'react';\nimport { isAlertingRule } from '../../utils/rules';\nimport { DetailsField } from '../DetailsField';\nimport { AlertInstancesTable } from './AlertInstancesTable';\nimport { SortOrder } from 'app/plugins/panel/alertlist/types';\nimport { GrafanaAlertState } from 'app/types/unified-alerting-dto';\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\nimport { css, cx } from '@emotion/css';\nimport { labelsMatchMatchers, parseMatchers } from 'app/features/alerting/unified/utils/alertmanager';\nimport { sortAlerts } from 'app/features/alerting/unified/utils/misc';\nimport { MatcherFilter } from 'app/features/alerting/unified/components/alert-groups/MatcherFilter';\nimport { AlertInstanceStateFilter } from 'app/features/alerting/unified/components/rules/AlertInstanceStateFilter';\n\ntype Props = {\n  promRule?: Rule;\n};\n\nexport function RuleDetailsMatchingInstances(props: Props): JSX.Element | null {\n  const { promRule } = props;\n\n  const [queryString, setQueryString] = useState<string>();\n  const [alertState, setAlertState] = useState<GrafanaAlertState>();\n\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const styles = useStyles(getStyles);\n\n  const alerts = useMemo(\n    (): Alert[] =>\n      isAlertingRule(promRule) && promRule.alerts?.length\n        ? filterAlerts(queryString, alertState, sortAlerts(SortOrder.Importance, promRule.alerts))\n        : [],\n    [promRule, alertState, queryString]\n  );\n\n  if (!isAlertingRule(promRule)) {\n    return null;\n  }\n\n  return (\n    <DetailsField label=\"Matching instances\" horizontal={true}>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <MatcherFilter\n            className={styles.rowChild}\n            key={queryStringKey}\n            queryString={queryString}\n            onFilterChange={(value) => setQueryString(value)}\n          />\n          <AlertInstanceStateFilter\n            className={styles.rowChild}\n            stateFilter={alertState}\n            onStateFilterChange={setAlertState}\n          />\n        </div>\n      </div>\n\n      <AlertInstancesTable instances={alerts} />\n    </DetailsField>\n  );\n}\n\nfunction filterAlerts(\n  alertInstanceLabel: string | undefined,\n  alertInstanceState: GrafanaAlertState | undefined,\n  alerts: Alert[]\n): Alert[] {\n  let filteredAlerts = [...alerts];\n  if (alertInstanceLabel) {\n    const matchers = parseMatchers(alertInstanceLabel || '');\n    filteredAlerts = filteredAlerts.filter(({ labels }) => labelsMatchMatchers(labels, matchers));\n  }\n  if (alertInstanceState) {\n    filteredAlerts = filteredAlerts.filter((alert) => {\n      return alert.state === alertInstanceState;\n    });\n  }\n\n  return filteredAlerts;\n}\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n      margin-bottom: ${theme.spacing.sm};\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin-right: ${theme.spacing.sm};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Rule } from 'app/types/unified-alerting';\nimport React, { FC } from 'react';\n\ninterface Prom {\n  rule: Rule;\n}\n\nexport const RuleHealth: FC<Prom> = ({ rule }) => {\n  const style = useStyles2(getStyle);\n  if (rule.health === 'err' || rule.health === 'error') {\n    return (\n      <Tooltip theme=\"error\" content={rule.lastError || 'No error message provided.'}>\n        <div className={style.warn}>\n          <Icon name=\"exclamation-triangle\" />\n          <span>error</span>\n        </div>\n      </Tooltip>\n    );\n  }\n  return <>{rule.health}</>;\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  warn: css`\n    display: inline-flex;\n    flex-direction: row;\n    color: ${theme.colors.warning.text};\n    & > * + * {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { HorizontalGroup, Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\nimport React, { FC, useMemo } from 'react';\nimport { isAlertingRule, isRecordingRule, getFirstActiveAt } from '../../utils/rules';\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface Props {\n  rule: CombinedRule;\n  isDeleting: boolean;\n  isCreating: boolean;\n}\n\nexport const RuleState: FC<Props> = ({ rule, isDeleting, isCreating }) => {\n  const style = useStyles2(getStyle);\n  const { promRule } = rule;\n\n  // return how long the rule has been in it's firing state, if any\n  const forTime = useMemo(() => {\n    if (\n      promRule &&\n      isAlertingRule(promRule) &&\n      promRule.alerts?.length &&\n      promRule.state !== PromAlertingRuleState.Inactive\n    ) {\n      // find earliest alert\n      const firstActiveAt = getFirstActiveAt(promRule);\n\n      // calculate time elapsed from earliest alert\n      if (firstActiveAt) {\n        return (\n          <span title={String(firstActiveAt)} className={style.for}>\n            for{' '}\n            {intervalToAbbreviatedDurationString(\n              {\n                start: firstActiveAt,\n                end: new Date(),\n              },\n              false\n            )}\n          </span>\n        );\n      }\n    }\n    return null;\n  }, [promRule, style]);\n\n  if (isDeleting) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (isCreating) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        {' '}\n        <Spinner />\n        creating\n      </HorizontalGroup>\n    );\n  } else if (promRule && isAlertingRule(promRule)) {\n    return (\n      <HorizontalGroup align=\"flex-start\">\n        <AlertStateTag state={promRule.state} />\n        {forTime}\n      </HorizontalGroup>\n    );\n  } else if (promRule && isRecordingRule(promRule)) {\n    return <>Recording rule</>;\n  }\n  return <>n/a</>;\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  for: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    padding-top: 2px;\n  `,\n});\n","import {\n  CombinedRule,\n  CombinedRuleGroup,\n  CombinedRuleNamespace,\n  Rule,\n  RuleGroup,\n  RuleNamespace,\n  RulesSource,\n} from 'app/types/unified-alerting';\nimport { RulerRuleDTO, RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\nimport { useMemo, useRef } from 'react';\nimport {\n  getAllRulesSources,\n  getRulesSourceByName,\n  isCloudRulesSource,\n  isGrafanaRulesSource,\n} from '../utils/datasource';\nimport { isAlertingRule, isAlertingRulerRule, isRecordingRulerRule } from '../utils/rules';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\ninterface CacheValue {\n  promRules?: RuleNamespace[];\n  rulerRules?: RulerRulesConfigDTO | null;\n  result: CombinedRuleNamespace[];\n}\n\n// this little monster combines prometheus rules and ruler rules to produce a unified data structure\n// can limit to a single rules source\nexport function useCombinedRuleNamespaces(rulesSourceName?: string): CombinedRuleNamespace[] {\n  const promRulesResponses = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRulesResponses = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  // cache results per rules source, so we only recalculate those for which results have actually changed\n  const cache = useRef<Record<string, CacheValue>>({});\n\n  const rulesSources = useMemo((): RulesSource[] => {\n    if (rulesSourceName) {\n      const rulesSource = getRulesSourceByName(rulesSourceName);\n      if (!rulesSource) {\n        throw new Error(`Unknown rules source: ${rulesSourceName}`);\n      }\n      return [rulesSource];\n    }\n    return getAllRulesSources();\n  }, [rulesSourceName]);\n\n  return useMemo(\n    () =>\n      rulesSources\n        .map((rulesSource): CombinedRuleNamespace[] => {\n          const rulesSourceName = isCloudRulesSource(rulesSource) ? rulesSource.name : rulesSource;\n          const promRules = promRulesResponses[rulesSourceName]?.result;\n          const rulerRules = rulerRulesResponses[rulesSourceName]?.result;\n\n          const cached = cache.current[rulesSourceName];\n          if (cached && cached.promRules === promRules && cached.rulerRules === rulerRules) {\n            return cached.result;\n          }\n          const namespaces: Record<string, CombinedRuleNamespace> = {};\n\n          // first get all the ruler rules in\n          Object.entries(rulerRules || {}).forEach(([namespaceName, groups]) => {\n            const namespace: CombinedRuleNamespace = {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            };\n            namespaces[namespaceName] = namespace;\n            addRulerGroupsToCombinedNamespace(namespace, groups);\n          });\n\n          // then correlate with prometheus rules\n          promRules?.forEach(({ name: namespaceName, groups }) => {\n            const ns = (namespaces[namespaceName] = namespaces[namespaceName] || {\n              rulesSource,\n              name: namespaceName,\n              groups: [],\n            });\n\n            addPromGroupsToCombinedNamespace(ns, groups);\n          });\n\n          const result = Object.values(namespaces);\n          if (isGrafanaRulesSource(rulesSource)) {\n            // merge all groups in case of grafana managed, essentially treating namespaces (folders) as gorups\n            result.forEach((namespace) => {\n              namespace.groups = [\n                {\n                  name: 'default',\n                  rules: namespace.groups.flatMap((g) => g.rules).sort((a, b) => a.name.localeCompare(b.name)),\n                },\n              ];\n            });\n          }\n          cache.current[rulesSourceName] = { promRules, rulerRules, result };\n          return result;\n        })\n        .flat(),\n    [promRulesResponses, rulerRulesResponses, rulesSources]\n  );\n}\n\nfunction addRulerGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RulerRuleGroupDTO[]): void {\n  namespace.groups = groups.map((group) => {\n    const combinedGroup: CombinedRuleGroup = {\n      name: group.name,\n      interval: group.interval,\n      rules: [],\n    };\n    combinedGroup.rules = group.rules.map((rule) => rulerRuleToCombinedRule(rule, namespace, combinedGroup));\n    return combinedGroup;\n  });\n}\n\nfunction addPromGroupsToCombinedNamespace(namespace: CombinedRuleNamespace, groups: RuleGroup[]): void {\n  groups.forEach((group) => {\n    let combinedGroup = namespace.groups.find((g) => g.name === group.name);\n    if (!combinedGroup) {\n      combinedGroup = {\n        name: group.name,\n        rules: [],\n      };\n      namespace.groups.push(combinedGroup);\n    }\n\n    (group.rules ?? []).forEach((rule) => {\n      const existingRule = getExistingRuleInGroup(rule, combinedGroup!, namespace.rulesSource);\n      if (existingRule) {\n        existingRule.promRule = rule;\n      } else {\n        combinedGroup!.rules.push(promRuleToCombinedRule(rule, namespace, combinedGroup!));\n      }\n    });\n  });\n}\n\nfunction promRuleToCombinedRule(rule: Rule, namespace: CombinedRuleNamespace, group: CombinedRuleGroup): CombinedRule {\n  return {\n    name: rule.name,\n    query: rule.query,\n    labels: rule.labels || {},\n    annotations: isAlertingRule(rule) ? rule.annotations || {} : {},\n    promRule: rule,\n    namespace: namespace,\n    group,\n  };\n}\n\nfunction rulerRuleToCombinedRule(\n  rule: RulerRuleDTO,\n  namespace: CombinedRuleNamespace,\n  group: CombinedRuleGroup\n): CombinedRule {\n  return isAlertingRulerRule(rule)\n    ? {\n        name: rule.alert,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : isRecordingRulerRule(rule)\n    ? {\n        name: rule.record,\n        query: rule.expr,\n        labels: rule.labels || {},\n        annotations: {},\n        rulerRule: rule,\n        namespace,\n        group,\n      }\n    : {\n        name: rule.grafana_alert.title,\n        query: '',\n        labels: rule.labels || {},\n        annotations: rule.annotations || {},\n        rulerRule: rule,\n        namespace,\n        group,\n      };\n}\n\n// find existing rule in group that matches the given prom rule\nfunction getExistingRuleInGroup(\n  rule: Rule,\n  group: CombinedRuleGroup,\n  rulesSource: RulesSource\n): CombinedRule | undefined {\n  if (isGrafanaRulesSource(rulesSource)) {\n    // assume grafana groups have only the one rule. check name anyway because paranoid\n    return group!.rules.find((existingRule) => existingRule.name === rule.name);\n  }\n  return (\n    // try finding a rule that matches name, labels, annotations and query\n    group!.rules.find(\n      (existingRule) => !existingRule.promRule && isCombinedRuleEqualToPromRule(existingRule, rule, true)\n    ) ??\n    // if that fails, try finding a rule that only matches name, labels and annotations.\n    // loki & prom can sometimes modify the query so it doesnt match, eg `2 > 1` becomes `1`\n    group!.rules.find(\n      (existingRule) => !existingRule.promRule && isCombinedRuleEqualToPromRule(existingRule, rule, false)\n    )\n  );\n}\n\nfunction isCombinedRuleEqualToPromRule(combinedRule: CombinedRule, rule: Rule, checkQuery = true): boolean {\n  if (combinedRule.name === rule.name) {\n    return (\n      JSON.stringify([\n        checkQuery ? hashQuery(combinedRule.query) : '',\n        combinedRule.labels,\n        combinedRule.annotations,\n      ]) ===\n      JSON.stringify([\n        checkQuery ? hashQuery(rule.query) : '',\n        rule.labels || {},\n        isAlertingRule(rule) ? rule.annotations || {} : {},\n      ])\n    );\n  }\n  return false;\n}\n\n// there can be slight differences in how prom & ruler render a query, this will hash them accounting for the differences\nfunction hashQuery(query: string) {\n  // one of them might be wrapped in parens\n  if (query.length > 1 && query[0] === '(' && query[query.length - 1] === ')') {\n    query = query.substr(1, query.length - 2);\n  }\n  // whitespace could be added or removed\n  query = query.replace(/\\s|\\n/g, '');\n  // labels matchers can be reordered, so sort the enitre string, esentially comparing just the character counts\n  return query.split('').sort().join('');\n}\n","import { FolderDTO } from 'app/types';\nimport { useDispatch } from 'react-redux';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nimport { useEffect } from 'react';\nimport { fetchFolderIfNotFetchedAction } from '../state/actions';\nimport { initialAsyncRequestState } from '../utils/redux';\n\ninterface ReturnBag {\n  folder?: FolderDTO;\n  loading: boolean;\n}\n\nexport function useFolder(uid?: string): ReturnBag {\n  const dispatch = useDispatch();\n  const folderRequests = useUnifiedAlertingSelector((state) => state.folders);\n  useEffect(() => {\n    if (uid) {\n      dispatch(fetchFolderIfNotFetchedAction(uid));\n    }\n  }, [dispatch, uid]);\n\n  if (uid) {\n    const request = folderRequests[uid] || initialAsyncRequestState;\n    return {\n      folder: request.result,\n      loading: request.loading,\n    };\n  }\n  return {\n    loading: false,\n  };\n}\n","import { contextSrv } from 'app/core/services/context_srv';\nimport { isGrafanaRulerRule } from '../utils/rules';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\nimport { useFolder } from './useFolder';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { checkIfLotexSupportsEditingRulesAction } from '../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface ResultBag {\n  isEditable?: boolean;\n  loading: boolean;\n}\n\nexport function useIsRuleEditable(rulesSourceName: string, rule?: RulerRuleDTO): ResultBag {\n  const checkEditingRequests = useUnifiedAlertingSelector((state) => state.lotexSupportsRuleEditing);\n  const dispatch = useDispatch();\n  const folderUID = rule && isGrafanaRulerRule(rule) ? rule.grafana_alert.namespace_uid : undefined;\n\n  const { folder, loading } = useFolder(folderUID);\n\n  useEffect(() => {\n    if (checkEditingRequests[rulesSourceName] === undefined && rulesSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n      dispatch(checkIfLotexSupportsEditingRulesAction(rulesSourceName));\n    }\n  }, [rulesSourceName, checkEditingRequests, dispatch]);\n\n  if (!rule) {\n    return { isEditable: false, loading: false };\n  }\n\n  // grafana rules can be edited if user can edit the folder they're in\n  if (isGrafanaRulerRule(rule)) {\n    if (!folderUID) {\n      throw new Error(\n        `Rule ${rule.grafana_alert.title} does not have a folder uid, cannot determine if it is editable.`\n      );\n    }\n    return {\n      isEditable: folder?.canSave,\n      loading,\n    };\n  }\n\n  // prom rules are only editable by users with Editor role and only if rules source supports editing\n  return {\n    isEditable: contextSrv.isEditor && !!checkEditingRequests[rulesSourceName]?.result,\n    loading: !!checkEditingRequests[rulesSourceName]?.loading,\n  };\n}\n"],"names":["MatcherFilter","className","onFilterChange","queryString","styles","useStyles2","getStyles","searchIcon","Icon","name","Label","Tooltip","content","icon","size","Input","placeholder","defaultValue","onChange","e","target","value","prefix","inputWidth","theme","css","spacing","RuleDetailsActionButtons","rule","rulesSource","dispatch","useDispatch","location","useLocation","style","namespace","group","rulerRule","ruleToDelete","setRuleToDelete","useState","alertmanagerSourceName","isGrafanaRulesSource","getAlertmanagerByUid","jsonData","alertmanagerUid","leftButtons","rightButtons","isEditable","useIsRuleEditable","getRulesSourceName","returnTo","pathname","search","isViewMode","endsWith","deleteRule","identifier","ruleId","deleteRuleAction","navigateTo","undefined","buildShareUrl","isCloudRulesSource","ruleUrl","encodeURIComponent","config","window","href","split","contextSrv","push","LinkButton","button","variant","createExploreLink","query","annotations","Annotation","dashboardUID","panelId","makeSilenceLink","createViewLink","sourceName","editURL","urlUtil","ClipboardButton","onClipboardCopy","appEvents","AppEvents","onClipboardError","text","getText","Button","type","onClick","length","wrapper","HorizontalGroup","width","ConfirmModal","isOpen","title","body","confirmText","onConfirm","onDismiss","colors","border","medium","typography","sm","RuleDetailsAnnotations","props","map","key","annotationKey","RuleDetailsDataSources","dataSources","useMemo","meta","info","logos","small","isGrafanaRulerRule","data","grafana_alert","unique","reduce","ds","getDataSourceSrv","getInstanceSettings","datasourceUid","uid","ExpressionDatasourceUID","Object","values","label","index","alt","dataSourceIcon","src","HighlightedQuery","language","expr","plugins","SlatePrism","onlyIn","node","getSyntax","prismLanguages","LogqlSyntax","PromqlSyntax","slateValue","makeValue","readOnly","Expression","expression","useStyles","Well","cx","well","DataSourceType","fontFamily","monospace","RuleDetailsExpression","DetailsField","horizontal","exprRow","AlertInstanceStateFilter","onStateFilterChange","stateFilter","stateOptions","GrafanaAlertState","RadioButtonGroup","options","v","RuleDetailsMatchingInstances","promRule","setQueryString","alertState","setAlertState","filterKey","Math","floor","random","queryStringKey","alerts","isAlertingRule","alertInstanceLabel","alertInstanceState","filteredAlerts","matchers","parseMatchers","filter","labels","labelsMatchMatchers","alert","state","filterAlerts","sortAlerts","SortOrder","flexRow","spaceBetween","rowChild","AlertInstancesTable","instances","RuleHealth","getStyle","health","lastError","warn","warning","RuleState","isDeleting","isCreating","forTime","PromAlertingRuleState","firstActiveAt","getFirstActiveAt","String","for","intervalToAbbreviatedDurationString","start","end","Date","align","Spinner","isRecordingRule","bodySmall","fontSize","secondary","useCombinedRuleNamespaces","rulesSourceName","promRulesResponses","useUnifiedAlertingSelector","promRules","rulerRulesResponses","rulerRules","cache","useRef","rulesSources","getRulesSourceByName","Error","getAllRulesSources","result","cached","current","namespaces","entries","forEach","namespaceName","groups","combinedGroup","interval","rules","isAlertingRulerRule","isRecordingRulerRule","record","rulerRuleToCombinedRule","addRulerGroupsToCombinedNamespace","find","g","existingRule","isCombinedRuleEqualToPromRule","getExistingRuleInGroup","promRuleToCombinedRule","addPromGroupsToCombinedNamespace","flatMap","sort","a","b","localeCompare","flat","combinedRule","checkQuery","JSON","stringify","hashQuery","substr","replace","join","useFolder","folderRequests","folders","useEffect","fetchFolderIfNotFetchedAction","request","initialAsyncRequestState","folder","loading","checkEditingRequests","lotexSupportsRuleEditing","folderUID","namespace_uid","GRAFANA_RULES_SOURCE_NAME","checkIfLotexSupportsEditingRulesAction","canSave"],"sourceRoot":""}