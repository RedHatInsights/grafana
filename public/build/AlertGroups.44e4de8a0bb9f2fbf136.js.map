{"version":3,"file":"AlertGroups.44e4de8a0bb9f2fbf136.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useQueryParams.ts","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertStateFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/GroupBy.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/AlertGroups.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useGroupedAlerts.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredAmGroups.ts","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/MatcherFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts"],"sourcesContent":["import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback((values: UrlQueryMap, replace?: boolean) => locationService.partial(values, replace), []);\n  return [queryParams, update];\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport React, { FC } from 'react';\nimport { makeAMLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { getMatcherQueryParams } from '../../utils/matchers';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails: FC<AmNotificationsAlertDetailsProps> = ({ alert, alertManagerSourceName }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <LinkButton\n            href={`${makeAMLink(\n              '/alerting/silences',\n              alertManagerSourceName\n            )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n            className={styles.button}\n            icon={'bell'}\n            size={'sm'}\n          >\n            Manage silences\n          </LinkButton>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <LinkButton\n            href={`${makeAMLink('/alerting/silence/new', alertManagerSourceName)}&${getMatcherQueryParams(\n              alert.labels\n            )}`}\n            className={styles.button}\n            icon={'bell-slash'}\n            size={'sm'}\n          >\n            Silence\n          </LinkButton>\n        )}\n        {alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n","import { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport React, { useMemo } from 'react';\nimport { useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { css } from '@emotion/css';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels className={styles.labels} labels={labels} />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  labels: css`\n    padding-bottom: 0;\n  `,\n});\n","import { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { useState } from 'react';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { AlertLabels } from '../AlertLabels';\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <AlertLabels className={styles.headerLabels} labels={group.labels} />\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  headerLabels: css`\n    padding-bottom: 0 !important;\n    margin-bottom: -${theme.spacing(0.5)};\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    padding: ${theme.spacing(1, 1, 1, 0)};\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n  `,\n  group: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  summary: css``,\n  spanElement: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n  [AlertState.Active]: css`\n    color: ${theme.colors.error.main};\n  `,\n  [AlertState.Suppressed]: css`\n    color: ${theme.colors.primary.main};\n  `,\n  [AlertState.Unprocessed]: css`\n    color: ${theme.colors.secondary.main};\n  `,\n});\n","import React from 'react';\nimport { RadioButtonGroup, Label, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  stateFilter?: AlertState;\n  onStateFilterChange: (value: AlertState) => void;\n}\n\nexport const AlertStateFilter = ({ onStateFilterChange, stateFilter }: Props) => {\n  const styles = useStyles2(getStyles);\n  const alertStateOptions: SelectableValue[] = Object.entries(AlertState)\n    .sort(([labelA], [labelB]) => (labelA < labelB ? -1 : 1))\n    .map(([label, state]) => ({\n      label,\n      value: state,\n    }));\n\n  return (\n    <div className={styles.wrapper}>\n      <Label>State</Label>\n      <RadioButtonGroup options={alertStateOptions} value={stateFilter} onChange={onStateFilterChange} />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    margin-left: ${theme.spacing(1)};\n  `,\n});\n","import { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport React from 'react';\nimport { uniq } from 'lodash';\nimport { Icon, Label, MultiSelect } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\ninterface Props {\n  className?: string;\n  groups: AlertmanagerGroup[];\n  groupBy: string[];\n  onGroupingChange: (keys: string[]) => void;\n}\n\nexport const GroupBy = ({ className, groups, groupBy, onGroupingChange }: Props) => {\n  const labelKeyOptions = uniq(groups.flatMap((group) => group.alerts).flatMap(({ labels }) => Object.keys(labels)))\n    .filter((label) => !(label.startsWith('__') && label.endsWith('__'))) // Filter out private labels\n    .map<SelectableValue>((key) => ({\n      label: key,\n      value: key,\n    }));\n\n  return (\n    <div data-testid={'group-by-container'} className={className}>\n      <Label>Custom group by</Label>\n      <MultiSelect\n        aria-label={'group by label keys'}\n        value={groupBy}\n        placeholder=\"Group by\"\n        prefix={<Icon name={'tag-alt'} />}\n        onChange={(items) => {\n          onGroupingChange(items.map(({ value }) => value as string));\n        }}\n        options={labelKeyOptions}\n      />\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { AlertManagerPicker } from '../AlertManagerPicker';\nimport { MatcherFilter } from './MatcherFilter';\nimport { AlertStateFilter } from './AlertStateFilter';\nimport { GroupBy } from './GroupBy';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { css } from '@emotion/css';\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\ninterface Props {\n  groups: AlertmanagerGroup[];\n}\n\nexport const AlertGroupFilter = ({ groups }: Props) => {\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { groupBy = [], queryString, alertState } = getFiltersFromUrlParams(queryParams);\n  const matcherFilterKey = `matcher-${filterKey}`;\n\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setQueryParams({\n      groupBy: null,\n      queryString: null,\n      alertState: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const showClearButton = !!(groupBy.length > 0 || queryString || alertState);\n\n  return (\n    <div className={styles.wrapper}>\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      <div className={styles.filterSection}>\n        <MatcherFilter\n          className={styles.filterInput}\n          key={matcherFilterKey}\n          queryString={queryString}\n          onFilterChange={(value) => setQueryParams({ queryString: value ? value : null })}\n        />\n        <GroupBy\n          className={styles.filterInput}\n          groups={groups}\n          groupBy={groupBy}\n          onGroupingChange={(keys) => setQueryParams({ groupBy: keys.length ? keys.join(',') : null })}\n        />\n        <AlertStateFilter\n          stateFilter={alertState as AlertState}\n          onStateFilterChange={(value) => setQueryParams({ alertState: value ? value : null })}\n        />\n        {showClearButton && (\n          <Button className={styles.clearButton} variant={'secondary'} icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterSection: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterInput: css`\n    width: 340px;\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  clearButton: css`\n    margin-left: ${theme.spacing(1)};\n    margin-top: 19px;\n  `,\n});\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Alert, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertGroup } from './components/alert-groups/AlertGroup';\nimport { AlertGroupFilter } from './components/alert-groups/AlertGroupFilter';\nimport { fetchAlertGroupsAction } from './state/actions';\n\nimport { initialAsyncRequestState } from './utils/redux';\nimport { getFiltersFromUrlParams } from './utils/misc';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from './utils/constants';\n\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useGroupedAlerts } from './hooks/useGroupedAlerts';\nimport { useFilteredAmGroups } from './hooks/useFilteredAmGroups';\nimport { css } from '@emotion/css';\n\nconst AlertGroups = () => {\n  const [alertManagerSourceName] = useAlertManagerSourceName();\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n  const { groupBy = [] } = getFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups);\n  const { loading, error, result: results = [] } =\n    alertGroups[alertManagerSourceName || ''] ?? initialAsyncRequestState;\n\n  const groupedAlerts = useGroupedAlerts(results, groupBy);\n  const filteredAlertGroups = useFilteredAmGroups(groupedAlerts);\n\n  useEffect(() => {\n    function fetchNotifications() {\n      if (alertManagerSourceName) {\n        dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n      }\n    }\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, alertManagerSourceName]);\n\n  return (\n    <AlertingPageWrapper pageId=\"groups\">\n      <AlertGroupFilter groups={results} />\n      {loading && <LoadingPlaceholder text=\"Loading notifications\" />}\n      {error && !loading && (\n        <Alert title={'Error loading notifications'} severity={'error'}>\n          {error.message || 'Unknown error'}\n        </Alert>\n      )}\n      {results &&\n        filteredAlertGroups.map((group, index) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(group.labels)}-group-${index}`}>\n              {((index === 1 && Object.keys(filteredAlertGroups[0].labels).length === 0) ||\n                (index === 0 && Object.keys(group.labels).length > 0)) && (\n                <p className={styles.groupingBanner}>Grouped by: {Object.keys(group.labels).join(', ')}</p>\n              )}\n              <AlertGroup alertManagerSourceName={alertManagerSourceName || ''} group={group} />\n            </React.Fragment>\n          );\n        })}\n      {results && !filteredAlertGroups.length && <p>No results.</p>}\n    </AlertingPageWrapper>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupingBanner: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n\nexport default AlertGroups;\n","import { useMemo } from 'react';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport { Labels } from '@grafana/data';\n\nexport const useGroupedAlerts = (groups: AlertmanagerGroup[], groupBy: string[]) => {\n  return useMemo(() => {\n    if (groupBy.length === 0) {\n      return groups;\n    }\n    const alerts = groups.flatMap(({ alerts }) => alerts);\n    return alerts.reduce((groupings, alert) => {\n      const alertContainsGroupings = groupBy.every((groupByLabel) => Object.keys(alert.labels).includes(groupByLabel));\n\n      if (alertContainsGroupings) {\n        const existingGrouping = groupings.find((group) => {\n          return groupBy.every((groupKey) => {\n            return group.labels[groupKey] === alert.labels[groupKey];\n          });\n        });\n        if (!existingGrouping) {\n          const labels = groupBy.reduce((acc, key) => {\n            acc = { ...acc, [key]: alert.labels[key] };\n            return acc;\n          }, {} as Labels);\n          groupings.push({\n            alerts: [alert],\n            labels,\n            receiver: {\n              name: 'NONE',\n            },\n          });\n        } else {\n          existingGrouping.alerts.push(alert);\n        }\n      } else {\n        const noGroupingGroup = groupings.find((group) => Object.keys(group.labels).length === 0);\n        if (!noGroupingGroup) {\n          groupings.push({ alerts: [alert], labels: {}, receiver: { name: 'NONE' } });\n        } else {\n          noGroupingGroup.alerts.push(alert);\n        }\n      }\n\n      return groupings;\n    }, [] as AlertmanagerGroup[]);\n  }, [groups, groupBy]);\n};\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport { useMemo } from 'react';\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { getFiltersFromUrlParams } from '../utils/misc';\n\nexport const useFilteredAmGroups = (groups: AlertmanagerGroup[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n  const matchers = parseMatchers(filters.queryString || '');\n\n  return useMemo(() => {\n    return groups.reduce((filteredGroup, group) => {\n      const alerts = group.alerts.filter(({ labels, status }) => {\n        const labelsMatch = labelsMatchMatchers(labels, matchers);\n        const filtersMatch = filters.alertState ? status.state === filters.alertState : true;\n        return labelsMatch && filtersMatch;\n      });\n      if (alerts.length > 0) {\n        // The ungrouped alerts should be first in the results\n        if (Object.keys(group.labels).length === 0) {\n          filteredGroup.unshift({ ...group, alerts });\n        } else {\n          filteredGroup.push({ ...group, alerts });\n        }\n      }\n      return filteredGroup;\n    }, [] as AlertmanagerGroup[]);\n  }, [groups, filters, matchers]);\n};\n","import React, { FC } from 'react';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useSelector } from 'react-redux';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import React, { FormEvent } from 'react';\nimport { Label, Tooltip, Input, Icon, useStyles2 } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  className?: string;\n  queryString?: string;\n  onFilterChange: (filterString: string) => void;\n}\n\nexport const MatcherFilter = ({ className, onFilterChange, queryString }: Props) => {\n  const styles = useStyles2(getStyles);\n  const handleSearchChange = (e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    onFilterChange(target.value);\n  };\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={className}>\n      <Label>\n        <Tooltip\n          content={\n            <div>\n              Filter alerts using label querying, ex:\n              <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n            </div>\n          }\n        >\n          <Icon className={styles.icon} name=\"info-circle\" size=\"xs\" />\n        </Tooltip>\n        Search by label\n      </Label>\n      <Input\n        placeholder=\"Search\"\n        defaultValue={queryString}\n        onChange={handleSearchChange}\n        data-testid=\"search-query-input\"\n        prefix={searchIcon}\n        className={styles.inputWidth}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  inputWidth: css`\n    width: 340px;\n    flex-grow: 0;\n  `,\n});\n","import { AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport React, { FC } from 'react';\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag: FC<Props> = ({ state }) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\nimport { useCallback } from 'react';\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n"],"names":["useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","locationService","AlertDetails","alert","alertManagerSourceName","styles","useStyles2","getStyles","className","actionsRow","status","state","AlertState","LinkButton","href","makeAMLink","silencedBy","join","button","icon","size","getMatcherQueryParams","labels","generatorURL","Object","entries","annotations","map","annotationKey","annotationValue","AnnotationDetailsField","value","receivers","name","filter","theme","css","spacing","colors","border","medium","AlertGroupAlertsTable","alerts","columns","id","label","renderCell","data","AmAlertStateTag","duration","intervalToAbbreviatedDurationString","start","Date","startsAt","end","endsAt","AlertLabels","items","fingerprint","tableWrapper","DynamicTableWithGuidelines","cols","isExpandable","renderExpandedContent","breakpoints","up","typography","bodySmall","fontSize","AlertGroup","group","isCollapsed","setIsCollapsed","useState","wrapper","header","CollapseToggle","onToggle","keys","length","headerLabels","AlertGroupHeader","background","secondary","summary","spanElement","error","main","primary","AlertStateFilter","onStateFilterChange","stateFilter","alertStateOptions","sort","labelA","labelB","Label","RadioButtonGroup","options","onChange","GroupBy","groups","groupBy","onGroupingChange","labelKeyOptions","uniq","flatMap","startsWith","endsWith","key","MultiSelect","placeholder","prefix","Icon","AlertGroupFilter","filterKey","setFilterKey","Math","floor","random","queryParams","setQueryParams","queryString","alertState","getFiltersFromUrlParams","matcherFilterKey","setAlertManagerSourceName","useAlertManagerSourceName","showClearButton","AlertManagerPicker","current","filterSection","MatcherFilter","filterInput","onFilterChange","Button","clearButton","variant","onClick","setTimeout","groupingBanner","dispatch","useDispatch","alertGroups","useUnifiedAlertingSelector","amAlertGroups","loading","result","results","initialAsyncRequestState","groupedAlerts","reduce","groupings","every","groupByLabel","includes","existingGrouping","find","groupKey","push","acc","receiver","noGroupingGroup","useGroupedAlerts","filteredAlertGroups","filters","matchers","parseMatchers","filteredGroup","labelsMatch","labelsMatchMatchers","filtersMatch","unshift","useFilteredAmGroups","useEffect","fetchNotifications","fetchAlertGroupsAction","interval","setInterval","NOTIFICATIONS_POLL_INTERVAL_MS","clearInterval","AlertingPageWrapper","pageId","LoadingPlaceholder","text","Alert","title","severity","message","index","JSON","stringify","children","isLoading","navModel","getNavModel","useSelector","navIndex","props","item","cx","contentGuideline","guideline","undefined","renderPrefixHeader","relative","headerGuideline","renderPrefixCell","_","topGuideline","bottomGuideline","down","searchIcon","Tooltip","content","Input","defaultValue","e","target","inputWidth","alertStateToState","isAlertManagerSource","GRAFANA_RULES_SOURCE_NAME","getAlertManagerDataSources","ds","updateQueryParams","update","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource"],"sourceRoot":""}