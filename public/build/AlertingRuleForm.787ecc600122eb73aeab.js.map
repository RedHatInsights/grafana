{"version":3,"file":"AlertingRuleForm.787ecc600122eb73aeab.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/core/hooks/useQueryParams.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GroupAndNamespaceFields.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudRulesSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useRuleSourcesWithRuler.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AlertTypeStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/DetailsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/ExpressionEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/VizWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useVizHeight.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/util.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryRows.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryStep.tsx","webpack://grafana/./public/app/features/alerting/unified/api/preview.ts","webpack://grafana/./public/app/features/alerting/unified/types/preview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRuleResult.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRule.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudConditionsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/ConditionField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaAlertStatePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaConditionEvalWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaConditionsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AlertRuleForm.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/PanelPluginsButtonGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AnnotationKeyInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AnnotationsField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/LabelsField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/SelectWIthAdd.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFolder.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useIsRuleEditable.ts","webpack://grafana/./public/app/features/alerting/unified/utils/timeRange.ts","webpack://grafana/./public/app/features/alerting/unified/state/AlertingQueryRunner.ts","webpack://grafana/./public/app/features/expressions/guards.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { UrlQueryMap } from '@grafana/data';\nimport { locationSearchToObject, locationService } from '@grafana/runtime';\nimport { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport function useQueryParams(): [UrlQueryMap, (values: UrlQueryMap, replace?: boolean) => void] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => locationSearchToObject(search || ''), [search]);\n  const update = useCallback(\n    (values: UrlQueryMap, replace?: boolean) => setImmediate(() => locationService.partial(values, replace)),\n    []\n  );\n  return [queryParams, update];\n}\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FieldSet, useStyles2 } from '@grafana/ui';\nimport React, { FC } from 'react';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string;\n}\n\nexport const RuleEditorSection: FC<RuleEditorSectionProps> = ({ title, stepNo, children, description }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.parent}>\n      <div>\n        <span className={styles.stepNo}>{stepNo}</span>\n      </div>\n      <div className={styles.content}>\n        <FieldSet label={title} className={styles.fieldset}>\n          {description && <p className={styles.description}>{description}</p>}\n          {children}\n        </FieldSet>\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  fieldset: css`\n    legend {\n      font-size: 16px;\n      padding-top: ${theme.spacing(0.5)};\n    }\n  `,\n  parent: css`\n    display: flex;\n    flex-direction: row;\n    max-width: ${theme.breakpoints.values.xl};\n    & + & {\n      margin-top: ${theme.spacing(4)};\n    }\n  `,\n  description: css`\n    margin-top: -${theme.spacing(2)};\n  `,\n  stepNo: css`\n    display: inline-block;\n    width: ${theme.spacing(4)};\n    height: ${theme.spacing(4)};\n    line-height: ${theme.spacing(4)};\n    border-radius: ${theme.spacing(4)};\n    text-align: center;\n    color: ${theme.colors.text.maxContrast};\n    background-color: ${theme.colors.background.canvas};\n    font-size: ${theme.typography.size.lg};\n    margin-right: ${theme.spacing(2)};\n  `,\n  content: css`\n    flex: 1;\n  `,\n});\n","import React, { FC, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { fetchRulerRulesAction } from '../../state/actions';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { useFormContext } from 'react-hook-form';\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { SelectWithAdd } from './SelectWIthAdd';\nimport { Field, InputControl, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\ninterface Props {\n  rulesSourceName: string;\n}\n\nexport const GroupAndNamespaceFields: FC<Props> = ({ rulesSourceName }) => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n\n  const style = useStyles2(getStyle);\n\n  const [customGroup, setCustomGroup] = useState(false);\n\n  const rulerRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchRulerRulesAction({ rulesSourceName }));\n  }, [rulesSourceName, dispatch]);\n\n  const rulesConfig = rulerRequests[rulesSourceName]?.result;\n\n  const namespace = watch('namespace');\n\n  const namespaceOptions = useMemo(\n    (): Array<SelectableValue<string>> =>\n      rulesConfig ? Object.keys(rulesConfig).map((namespace) => ({ label: namespace, value: namespace })) : [],\n    [rulesConfig]\n  );\n\n  const groupOptions = useMemo(\n    (): Array<SelectableValue<string>> =>\n      (namespace && rulesConfig?.[namespace]?.map((group) => ({ label: group.name, value: group.name }))) || [],\n    [namespace, rulesConfig]\n  );\n\n  return (\n    <div className={style.flexRow}>\n      <Field\n        data-testid=\"namespace-picker\"\n        label=\"Namespace\"\n        error={errors.namespace?.message}\n        invalid={!!errors.namespace?.message}\n      >\n        <InputControl\n          render={({ field: { onChange, ref, ...field } }) => (\n            <SelectWithAdd\n              {...field}\n              className={style.input}\n              onChange={(value) => {\n                setValue('group', ''); //reset if namespace changes\n                onChange(value);\n              }}\n              onCustomChange={(custom: boolean) => {\n                custom && setCustomGroup(true);\n              }}\n              options={namespaceOptions}\n              width={42}\n            />\n          )}\n          name=\"namespace\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n          }}\n        />\n      </Field>\n      <Field data-testid=\"group-picker\" label=\"Group\" error={errors.group?.message} invalid={!!errors.group?.message}>\n        <InputControl\n          render={({ field: { ref, ...field } }) => (\n            <SelectWithAdd {...field} options={groupOptions} width={42} custom={customGroup} className={style.input} />\n          )}\n          name=\"group\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n\n    & > * + * {\n      margin-left: ${theme.spacing(3)};\n    }\n  `,\n  input: css`\n    width: 330px !important;\n  `,\n});\n","import React, { useCallback } from 'react';\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { useRulesSourcesWithRuler } from '../../hooks/useRuleSourcesWithRuler';\n\ninterface Props {\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  value: string | null;\n  onBlur?: () => void;\n  name?: string;\n}\n\nexport function CloudRulesSourcePicker({ value, ...props }: Props): JSX.Element {\n  const rulesSourcesWithRuler = useRulesSourcesWithRuler();\n\n  const dataSourceFilter = useCallback(\n    (ds: DataSourceInstanceSettings): boolean => {\n      return !!rulesSourcesWithRuler.find(({ id }) => id === ds.id);\n    },\n    [rulesSourcesWithRuler]\n  );\n\n  return <DataSourcePicker noDefault alerting filter={dataSourceFilter} current={value} {...props} />;\n}\n","import { DataSourceInstanceSettings } from '@grafana/data';\nimport { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { checkIfLotexSupportsEditingRulesAction } from '../state/actions';\nimport { getRulesDataSources } from '../utils/datasource';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useRulesSourcesWithRuler(): DataSourceInstanceSettings[] {\n  const checkEditingRequests = useUnifiedAlertingSelector((state) => state.lotexSupportsRuleEditing);\n  const dispatch = useDispatch();\n\n  // try fetching rules for each prometheus to see if it has ruler\n  useEffect(() => {\n    getRulesDataSources()\n      .filter((ds) => checkEditingRequests[ds.name] === undefined)\n      .forEach((ds) => dispatch(checkIfLotexSupportsEditingRulesAction(ds.name)));\n  }, [dispatch, checkEditingRequests]);\n\n  return useMemo(() => getRulesDataSources().filter((ds) => checkEditingRequests[ds.name]?.result), [\n    checkEditingRequests,\n  ]);\n}\n","import React, { FC, useMemo } from 'react';\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, Input, InputControl, Select, useStyles2 } from '@grafana/ui';\nimport { css } from '@emotion/css';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { RuleFolderPicker } from './RuleFolderPicker';\nimport { GroupAndNamespaceFields } from './GroupAndNamespaceFields';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { CloudRulesSourcePicker } from './CloudRulesSourcePicker';\n\ninterface Props {\n  editingExistingRule: boolean;\n}\n\nconst recordingRuleNameValidationPattern = {\n  message:\n    'Recording rule name must be valid metric name. It may only contain letters, numbers, and colons. It may not contain whitespace.',\n  value: /^[a-zA-Z_:][a-zA-Z0-9_:]*$/,\n};\n\nexport const AlertTypeStep: FC<Props> = ({ editingExistingRule }) => {\n  const styles = useStyles2(getStyles);\n\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues & { location?: string }>();\n\n  const ruleFormType = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  const alertTypeOptions = useMemo((): SelectableValue[] => {\n    const result = [\n      {\n        label: 'Grafana managed alert',\n        value: RuleFormType.grafana,\n        description: 'Classic Grafana alerts based on thresholds.',\n      },\n    ];\n\n    if (contextSrv.isEditor) {\n      result.push({\n        label: 'Cortex/Loki managed alert',\n        value: RuleFormType.cloudAlerting,\n        description: 'Alert based on a system or application behavior. Based on Prometheus.',\n      });\n      result.push({\n        label: 'Cortex/Loki managed recording rule',\n        value: RuleFormType.cloudRecording,\n        description: 'Recording rule to pre-compute frequently needed or expensive calculations. Based on Prometheus.',\n      });\n    }\n\n    return result;\n  }, []);\n\n  return (\n    <RuleEditorSection stepNo={1} title=\"Rule type\">\n      <Field\n        className={styles.formInput}\n        label=\"Rule name\"\n        error={errors?.name?.message}\n        invalid={!!errors.name?.message}\n      >\n        <Input\n          id=\"name\"\n          {...register('name', {\n            required: { value: true, message: 'Must enter an alert name' },\n            pattern: ruleFormType === RuleFormType.cloudRecording ? recordingRuleNameValidationPattern : undefined,\n          })}\n          autoFocus={true}\n        />\n      </Field>\n      <div className={styles.flexRow}>\n        <Field\n          disabled={editingExistingRule}\n          label=\"Rule type\"\n          className={styles.formInput}\n          error={errors.type?.message}\n          invalid={!!errors.type?.message}\n          data-testid=\"alert-type-picker\"\n        >\n          <InputControl\n            render={({ field: { onChange, ref, ...field } }) => (\n              <Select\n                menuShouldPortal\n                aria-label=\"Rule type\"\n                {...field}\n                options={alertTypeOptions}\n                onChange={(v: SelectableValue) => onChange(v?.value)}\n              />\n            )}\n            name=\"type\"\n            control={control}\n            rules={{\n              required: { value: true, message: 'Please select alert type' },\n            }}\n          />\n        </Field>\n        {(ruleFormType === RuleFormType.cloudRecording || ruleFormType === RuleFormType.cloudAlerting) && (\n          <Field\n            className={styles.formInput}\n            label=\"Select data source\"\n            error={errors.dataSourceName?.message}\n            invalid={!!errors.dataSourceName?.message}\n            data-testid=\"datasource-picker\"\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <CloudRulesSourcePicker\n                  {...field}\n                  onChange={(ds: DataSourceInstanceSettings) => {\n                    // reset location if switching data sources, as different rules source will have different groups and namespaces\n                    setValue('location', undefined);\n                    onChange(ds?.name ?? null);\n                  }}\n                />\n              )}\n              name=\"dataSourceName\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Please select a data source' },\n              }}\n            />\n          </Field>\n        )}\n      </div>\n      {(ruleFormType === RuleFormType.cloudRecording || ruleFormType === RuleFormType.cloudAlerting) &&\n        dataSourceName && <GroupAndNamespaceFields rulesSourceName={dataSourceName} />}\n\n      {ruleFormType === RuleFormType.grafana && (\n        <Field\n          label=\"Folder\"\n          className={styles.formInput}\n          error={errors.folder?.message}\n          invalid={!!errors.folder?.message}\n          data-testid=\"folder-picker\"\n        >\n          <InputControl\n            render={({ field: { ref, ...field } }) => (\n              <RuleFolderPicker {...field} enableCreateNew={true} enableReset={true} />\n            )}\n            name=\"folder\"\n            rules={{\n              required: { value: true, message: 'Please select a folder' },\n            }}\n          />\n        </Field>\n      )}\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  formInput: css`\n    width: 330px;\n    & + & {\n      margin-left: ${theme.spacing(3)};\n    }\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n  `,\n});\n","import React, { FC } from 'react';\nimport LabelsField from './LabelsField';\nimport AnnotationsField from './AnnotationsField';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\n\nexport const DetailsStep: FC = () => {\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const type = watch('type');\n\n  return (\n    <RuleEditorSection\n      stepNo={type === RuleFormType.cloudRecording ? 3 : 4}\n      title={\n        type === RuleFormType.cloudRecording ? 'Add details for your recording rule' : 'Add details for your alert'\n      }\n      description={\n        type === RuleFormType.cloudRecording\n          ? 'Add labels to help you better manage your rules'\n          : 'Write a summary and add labels to help you better manage your alerts'\n      }\n    >\n      {type !== RuleFormType.cloudRecording && <AnnotationsField />}\n      <LabelsField />\n    </RuleEditorSection>\n  );\n};\n","import React, { FC, useCallback, useMemo, useState } from 'react';\nimport { noop } from 'lodash';\nimport { CoreApp, DataQuery } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { useAsync } from 'react-use';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\n\nexport interface ExpressionEditorProps {\n  value?: string;\n  onChange: (value: string) => void;\n  dataSourceName: string; // will be a prometheus or loki datasource\n}\n\nexport const ExpressionEditor: FC<ExpressionEditorProps> = ({ value, onChange, dataSourceName }) => {\n  const { mapToValue, mapToQuery } = useQueryMappers(dataSourceName);\n  const [query, setQuery] = useState(mapToQuery({ refId: 'A', hide: false }, value));\n  const { error, loading, value: dataSource } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n\n  const onChangeQuery = useCallback(\n    (query: DataQuery) => {\n      setQuery(query);\n      onChange(mapToValue(query));\n    },\n    [onChange, mapToValue]\n  );\n\n  if (loading || dataSource?.name !== dataSourceName) {\n    return null;\n  }\n\n  if (error || !dataSource || !dataSource?.components?.QueryEditor) {\n    const errorMessage = error?.message || 'Data source plugin does not export any Query Editor component';\n    return <div>Could not load query editor due to: {errorMessage}</div>;\n  }\n\n  const QueryEditor = dataSource?.components?.QueryEditor;\n\n  return (\n    <QueryEditor\n      query={query}\n      queries={[query]}\n      app={CoreApp.CloudAlerting}\n      onChange={onChangeQuery}\n      onRunQuery={noop}\n      datasource={dataSource}\n    />\n  );\n};\n\ntype QueryMappers<T extends DataQuery = DataQuery> = {\n  mapToValue: (query: T) => string;\n  mapToQuery: (existing: T, value: string | undefined) => T;\n};\n\nfunction useQueryMappers(dataSourceName: string): QueryMappers {\n  return useMemo(() => {\n    const settings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n    switch (settings?.type) {\n      case 'loki':\n      case 'prometheus':\n        return {\n          mapToValue: (query: DataQuery) => (query as PromQuery | LokiQuery).expr,\n          mapToQuery: (existing: DataQuery, value: string | undefined) => ({ ...existing, expr: value }),\n        };\n      default:\n        throw new Error(`${dataSourceName} is not supported as an expression editor`);\n    }\n  }, [dataSourceName]);\n}\n","import React, { FC, useEffect, useMemo, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { css } from '@emotion/css';\nimport { FieldConfigSource, GrafanaTheme2, PanelData, ThresholdsConfig } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { PanelContext, PanelContextProvider, useStyles2 } from '@grafana/ui';\nimport { PanelOptions } from 'app/plugins/panel/table/models.gen';\nimport { useVizHeight } from '../../hooks/useVizHeight';\nimport { SupportedPanelPlugins, PanelPluginsButtonGroup } from '../PanelPluginsButtonGroup';\nimport appEvents from 'app/core/app_events';\n\ninterface Props {\n  data: PanelData;\n  currentPanel: SupportedPanelPlugins;\n  changePanel: (panel: SupportedPanelPlugins) => void;\n  thresholds: ThresholdsConfig;\n  onThresholdsChange: (thresholds: ThresholdsConfig) => void;\n}\n\nexport const VizWrapper: FC<Props> = ({ data, currentPanel, changePanel, onThresholdsChange, thresholds }) => {\n  const [options, setOptions] = useState<PanelOptions>({\n    frameIndex: 0,\n    showHeader: true,\n  });\n  const vizHeight = useVizHeight(data, currentPanel, options.frameIndex);\n  const styles = useStyles2(getStyles(vizHeight));\n\n  const [fieldConfig, setFieldConfig] = useState<FieldConfigSource>(defaultFieldConfig(thresholds, data));\n\n  useEffect(() => {\n    setFieldConfig((fieldConfig) => ({\n      ...fieldConfig,\n      defaults: {\n        ...fieldConfig.defaults,\n        thresholds: thresholds,\n        unit: defaultUnit(data),\n        custom: {\n          ...fieldConfig.defaults.custom,\n          thresholdsStyle: {\n            mode: 'line',\n          },\n        },\n      },\n    }));\n  }, [thresholds, setFieldConfig, data]);\n\n  const context: PanelContext = useMemo(\n    () => ({\n      eventBus: appEvents,\n      canEditThresholds: true,\n      onThresholdsChange: onThresholdsChange,\n    }),\n    [onThresholdsChange]\n  );\n\n  if (!options || !data) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.buttonGroup}>\n        <PanelPluginsButtonGroup onChange={changePanel} value={currentPanel} />\n      </div>\n      <AutoSizer>\n        {({ width }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <div style={{ height: `${vizHeight}px`, width: `${width}px` }}>\n              <PanelContextProvider value={context}>\n                <PanelRenderer\n                  height={vizHeight}\n                  width={width}\n                  data={data}\n                  pluginId={currentPanel}\n                  title=\"title\"\n                  onOptionsChange={setOptions}\n                  options={options}\n                  fieldConfig={fieldConfig}\n                />\n              </PanelContextProvider>\n            </div>\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nconst getStyles = (visHeight: number) => (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    padding: 0 ${theme.spacing(2)};\n    height: ${visHeight + theme.spacing.gridSize * 4}px;\n  `,\n  buttonGroup: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n});\n\nfunction defaultUnit(data: PanelData): string | undefined {\n  return data.series[0]?.fields.find((field) => field.type === 'number')?.config.unit;\n}\n\nfunction defaultFieldConfig(thresholds: ThresholdsConfig, data: PanelData): FieldConfigSource {\n  if (!thresholds) {\n    return { defaults: {}, overrides: [] };\n  }\n\n  return {\n    defaults: {\n      thresholds: thresholds,\n      unit: defaultUnit(data),\n      custom: {\n        thresholdsStyle: {\n          mode: 'line',\n        },\n      },\n    },\n    overrides: [],\n  };\n}\n","import { PanelData } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\nimport { STAT, TIMESERIES } from '../utils/constants';\n\nexport function useVizHeight(data: PanelData, pluginId: string, frameIndex: number) {\n  const theme = useTheme2();\n  if (pluginId === TIMESERIES || pluginId === STAT || dataIsEmpty(data)) {\n    return 200;\n  }\n\n  const values = data.series[frameIndex].fields[0].values.length;\n  const rowHeight = theme.spacing.gridSize * 5;\n\n  /*\n   Calculate how if we can make  the table smaller than 200px\n   for when we only have 1-2 values\n   The extra rowHeight is to accommodate the header.\n  */\n  const tableHeight = values * rowHeight + rowHeight;\n\n  return tableHeight >= 200 ? 200 : tableHeight;\n}\n\nfunction dataIsEmpty(data: PanelData) {\n  return !data || !data.series[0] || !data.series[0].fields[0] || !data.series[0].fields[0].values;\n}\n","import React, { FC, ReactNode, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport {\n  CoreApp,\n  DataQuery,\n  DataSourceInstanceSettings,\n  getDefaultRelativeTimeRange,\n  GrafanaTheme2,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n  ThresholdsConfig,\n} from '@grafana/data';\nimport { RelativeTimeRangePicker, useStyles2 } from '@grafana/ui';\nimport { QueryEditorRow } from 'app/features/query/components/QueryEditorRow';\nimport { VizWrapper } from './VizWrapper';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { TABLE, TIMESERIES } from '../../utils/constants';\nimport { SupportedPanelPlugins } from '../PanelPluginsButtonGroup';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\ninterface Props {\n  data: PanelData;\n  query: AlertQuery;\n  queries: AlertQuery[];\n  dsSettings: DataSourceInstanceSettings;\n  onChangeDataSource: (settings: DataSourceInstanceSettings, index: number) => void;\n  onChangeQuery: (query: DataQuery, index: number) => void;\n  onChangeTimeRange?: (timeRange: RelativeTimeRange, index: number) => void;\n  onRemoveQuery: (query: DataQuery) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n  index: number;\n  thresholds: ThresholdsConfig;\n  onChangeThreshold: (thresholds: ThresholdsConfig, index: number) => void;\n}\n\nexport const QueryWrapper: FC<Props> = ({\n  data,\n  dsSettings,\n  index,\n  onChangeDataSource,\n  onChangeQuery,\n  onChangeTimeRange,\n  onRunQueries,\n  onRemoveQuery,\n  onDuplicateQuery,\n  query,\n  queries,\n  thresholds,\n  onChangeThreshold,\n}) => {\n  const styles = useStyles2(getStyles);\n  const isExpression = isExpressionQuery(query.model);\n  const [pluginId, changePluginId] = useState<SupportedPanelPlugins>(isExpression ? TABLE : TIMESERIES);\n\n  const renderTimePicker = (query: AlertQuery, index: number): ReactNode => {\n    if (isExpressionQuery(query.model) || !onChangeTimeRange) {\n      return null;\n    }\n\n    return (\n      <RelativeTimeRangePicker\n        timeRange={query.relativeTimeRange ?? getDefaultRelativeTimeRange()}\n        onChange={(range) => onChangeTimeRange(range, index)}\n      />\n    );\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <QueryEditorRow<DataQuery>\n        dataSource={dsSettings}\n        onChangeDataSource={!isExpression ? (settings) => onChangeDataSource(settings, index) : undefined}\n        id={query.refId}\n        index={index}\n        key={query.refId}\n        data={data}\n        query={cloneDeep(query.model)}\n        onChange={(query) => onChangeQuery(query, index)}\n        onRemoveQuery={onRemoveQuery}\n        onAddQuery={() => onDuplicateQuery(cloneDeep(query))}\n        onRunQuery={onRunQueries}\n        queries={queries}\n        renderHeaderExtras={() => renderTimePicker(query, index)}\n        app={CoreApp.UnifiedAlerting}\n        visualization={\n          data.state !== LoadingState.NotStarted ? (\n            <VizWrapper\n              data={data}\n              changePanel={changePluginId}\n              currentPanel={pluginId}\n              thresholds={thresholds}\n              onThresholdsChange={(thresholds) => onChangeThreshold(thresholds, index)}\n            />\n          ) : null\n        }\n        hideDisableQuery={true}\n      />\n    </div>\n  );\n};\n\nexport const EmptyQueryWrapper: FC<{}> = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return <div className={styles.wrapper}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    label: AlertingQueryWrapper;\n    margin-bottom: ${theme.spacing(1)};\n    border: 1px solid ${theme.colors.border.medium};\n    border-radius: ${theme.shape.borderRadius(1)};\n  `,\n});\n","import { isExpressionQuery } from 'app/features/expressions/guards';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nexport function queriesWithUpdatedReferences(\n  queries: AlertQuery[],\n  previousRefId: string,\n  newRefId: string\n): AlertQuery[] {\n  return queries.map((query) => {\n    if (previousRefId === newRefId) {\n      return query;\n    }\n\n    if (!isExpressionQuery(query.model)) {\n      return query;\n    }\n\n    const isMathExpression = query.model.type === 'math';\n    const isReduceExpression = query.model.type === 'reduce';\n    const isResampleExpression = query.model.type === 'resample';\n    const isClassicExpression = query.model.type === 'classic_conditions';\n\n    if (isMathExpression) {\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: updateMathExpressionRefs(query.model.expression ?? '', previousRefId, newRefId),\n        },\n      };\n    }\n\n    if (isResampleExpression || isReduceExpression) {\n      const isReferencing = query.model.expression === previousRefId;\n\n      return {\n        ...query,\n        model: {\n          ...query.model,\n          expression: isReferencing ? newRefId : query.model.expression,\n        },\n      };\n    }\n\n    if (isClassicExpression) {\n      const conditions = query.model.conditions?.map((condition) => ({\n        ...condition,\n        query: {\n          ...condition.query,\n          params: condition.query.params.map((param: string) => (param === previousRefId ? newRefId : param)),\n        },\n      }));\n\n      return { ...query, model: { ...query.model, conditions } };\n    }\n\n    return query;\n  });\n}\n\nexport function updateMathExpressionRefs(expression: string, previousRefId: string, newRefId: string): string {\n  const oldExpression = new RegExp('(\\\\$' + previousRefId + '\\\\b)|(\\\\${' + previousRefId + '})', 'gm');\n  const newExpression = '${' + newRefId + '}';\n\n  return expression.replace(oldExpression, newExpression);\n}\n","import React, { PureComponent, useState } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport {\n  DataQuery,\n  DataSourceInstanceSettings,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n  ThresholdsConfig,\n  ThresholdsMode,\n} from '@grafana/data';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport { EmptyQueryWrapper, QueryWrapper } from './QueryWrapper';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { queriesWithUpdatedReferences } from './util';\nimport { Button, Card, Icon } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\ninterface Props {\n  // The query configuration\n  queries: AlertQuery[];\n  data: Record<string, PanelData>;\n\n  // Query editing\n  onQueriesChange: (queries: AlertQuery[]) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n}\n\ninterface State {\n  dataPerQuery: Record<string, PanelData>;\n}\n\nexport class QueryRows extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { dataPerQuery: {} };\n  }\n\n  onRemoveQuery = (query: DataQuery) => {\n    this.props.onQueriesChange(\n      this.props.queries.filter((item) => {\n        return item.model.refId !== query.refId;\n      })\n    );\n  };\n\n  onChangeTimeRange = (timeRange: RelativeTimeRange, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          relativeTimeRange: timeRange,\n        };\n      })\n    );\n  };\n\n  onChangeThreshold = (thresholds: ThresholdsConfig, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    const referencedRefId = queries[index].refId;\n\n    onQueriesChange(\n      queries.map((query) => {\n        if (!isExpressionQuery(query.model)) {\n          return query;\n        }\n\n        if (query.model.conditions && query.model.conditions[0].query.params[0] === referencedRefId) {\n          return {\n            ...query,\n            model: {\n              ...query.model,\n              conditions: query.model.conditions.map((condition, conditionIndex) => {\n                // Only update the first condition for a given refId.\n                if (condition.query.params[0] === referencedRefId && conditionIndex === 0) {\n                  return {\n                    ...condition,\n                    evaluator: {\n                      ...condition.evaluator,\n                      params: [parseFloat(thresholds.steps[1].value.toPrecision(3))],\n                    },\n                  };\n                }\n                return condition;\n              }),\n            },\n          };\n        }\n        return query;\n      })\n    );\n  };\n\n  onChangeDataSource = (settings: DataSourceInstanceSettings, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    const updatedQueries = queries.map((item, itemIndex) => {\n      if (itemIndex !== index) {\n        return item;\n      }\n\n      const previous = getDataSourceSrv().getInstanceSettings(item.datasourceUid);\n\n      if (previous?.type === settings.uid) {\n        return {\n          ...item,\n          datasourceUid: settings.uid,\n        };\n      }\n\n      return {\n        ...item,\n        datasourceUid: settings.uid,\n      };\n    });\n    onQueriesChange(updatedQueries);\n  };\n\n  onChangeQuery = (query: DataQuery, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    // find what queries still have a reference to the old name\n    const previousRefId = queries[index].refId;\n    const newRefId = query.refId;\n\n    onQueriesChange(\n      queriesWithUpdatedReferences(queries, previousRefId, newRefId).map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        return {\n          ...item,\n          refId: query.refId,\n          queryType: item.model.queryType ?? '',\n          model: {\n            ...item.model,\n            ...query,\n            datasource: query.datasource!,\n          },\n        };\n      })\n    );\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n  };\n\n  onDuplicateQuery = (query: DataQuery, source: AlertQuery): void => {\n    this.props.onDuplicateQuery({\n      ...source,\n      model: query,\n    });\n  };\n\n  getDataSourceSettings = (query: AlertQuery): DataSourceInstanceSettings | undefined => {\n    return getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n  };\n\n  getThresholdsForQueries = (queries: AlertQuery[]): Record<string, ThresholdsConfig> => {\n    const record: Record<string, ThresholdsConfig> = {};\n\n    for (const query of queries) {\n      if (!isExpressionQuery(query.model)) {\n        continue;\n      }\n\n      if (!Array.isArray(query.model.conditions)) {\n        continue;\n      }\n\n      query.model.conditions.forEach((condition, index) => {\n        if (index > 0) {\n          return;\n        }\n        const threshold = condition.evaluator.params[0];\n        const refId = condition.query.params[0];\n\n        if (condition.evaluator.type === 'outside_range' || condition.evaluator.type === 'within_range') {\n          return;\n        }\n        if (!record[refId]) {\n          record[refId] = {\n            mode: ThresholdsMode.Absolute,\n            steps: [\n              {\n                value: -Infinity,\n                color: config.theme2.colors.success.main,\n              },\n            ],\n          };\n        }\n\n        record[refId].steps.push({\n          value: threshold,\n          color: config.theme2.colors.error.main,\n        });\n      });\n    }\n\n    return record;\n  };\n\n  render() {\n    const { onDuplicateQuery, onRunQueries, queries } = this.props;\n    const thresholdByRefId = this.getThresholdsForQueries(queries);\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"alerting-queries\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {queries.map((query, index) => {\n                  const data: PanelData = this.props.data?.[query.refId] ?? {\n                    series: [],\n                    state: LoadingState.NotStarted,\n                  };\n                  const dsSettings = this.getDataSourceSettings(query);\n\n                  if (!dsSettings) {\n                    return (\n                      <DatasourceNotFound\n                        key={`${query.refId}-${index}`}\n                        index={index}\n                        model={query.model}\n                        onUpdateDatasource={() => {\n                          const defaultDataSource = getDatasourceSrv().getInstanceSettings(null);\n                          if (defaultDataSource) {\n                            this.onChangeDataSource(defaultDataSource, index);\n                          }\n                        }}\n                        onRemoveQuery={() => {\n                          this.onRemoveQuery(query);\n                        }}\n                      />\n                    );\n                  }\n\n                  return (\n                    <QueryWrapper\n                      index={index}\n                      key={`${query.refId}-${index}`}\n                      dsSettings={dsSettings}\n                      data={data}\n                      query={query}\n                      onChangeQuery={this.onChangeQuery}\n                      onRemoveQuery={this.onRemoveQuery}\n                      queries={queries}\n                      onChangeDataSource={this.onChangeDataSource}\n                      onDuplicateQuery={onDuplicateQuery}\n                      onRunQueries={onRunQueries}\n                      onChangeTimeRange={this.onChangeTimeRange}\n                      thresholds={thresholdByRefId[query.refId]}\n                      onChangeThreshold={this.onChangeThreshold}\n                    />\n                  );\n                })}\n                {provided.placeholder}\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\ninterface DatasourceNotFoundProps {\n  index: number;\n  model: AlertDataQuery;\n  onUpdateDatasource: () => void;\n  onRemoveQuery: () => void;\n}\n\nconst DatasourceNotFound = ({ index, onUpdateDatasource, onRemoveQuery, model }: DatasourceNotFoundProps) => {\n  const refId = model.refId;\n\n  const [showDetails, setShowDetails] = useState<boolean>(false);\n\n  const toggleDetails = () => {\n    setShowDetails((show) => !show);\n  };\n\n  const handleUpdateDatasource = () => {\n    onUpdateDatasource();\n  };\n\n  return (\n    <EmptyQueryWrapper>\n      <QueryOperationRow title={refId} draggable index={index} id={refId} isOpen>\n        <Card\n          heading=\"This datasource has been removed\"\n          description={\n            'The datasource for this query was not found, it was either removed or is not installed correctly.'\n          }\n        >\n          <Card.Figure>\n            <Icon name=\"question-circle\" />\n          </Card.Figure>\n          <Card.Actions>\n            <Button key=\"update\" variant=\"secondary\" onClick={handleUpdateDatasource}>\n              Update datasource\n            </Button>\n            <Button key=\"remove\" variant=\"destructive\" onClick={onRemoveQuery}>\n              Remove query\n            </Button>\n          </Card.Actions>\n          <Card.SecondaryActions>\n            <Button\n              key=\"details\"\n              onClick={toggleDetails}\n              icon={showDetails ? 'angle-up' : 'angle-down'}\n              fill=\"text\"\n              size=\"sm\"\n            >\n              Show details\n            </Button>\n          </Card.SecondaryActions>\n        </Card>\n        {showDetails && (\n          <div>\n            <pre>\n              <code>{JSON.stringify(model, null, 2)}</code>\n            </pre>\n          </div>\n        )}\n      </QueryOperationRow>\n    </EmptyQueryWrapper>\n  );\n};\n","import React, { PureComponent } from 'react';\nimport { css } from '@emotion/css';\nimport {\n  DataQuery,\n  getDefaultRelativeTimeRange,\n  GrafanaTheme2,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, HorizontalGroup, Icon, stylesFactory, Tooltip } from '@grafana/ui';\nimport { config } from '@grafana/runtime';\nimport { QueryRows } from './QueryRows';\nimport {\n  dataSource as expressionDatasource,\n  ExpressionDatasourceUID,\n} from 'app/features/expressions/ExpressionDatasource';\nimport { getNextRefIdChar } from 'app/core/utils/query';\nimport { defaultCondition } from 'app/features/expressions/utils/expressionTypes';\nimport { ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { AlertingQueryRunner } from '../../state/AlertingQueryRunner';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\n\ninterface Props {\n  value?: AlertQuery[];\n  onChange: (queries: AlertQuery[]) => void;\n}\n\ninterface State {\n  panelDataByRefId: Record<string, PanelData>;\n}\nexport class QueryEditor extends PureComponent<Props, State> {\n  private runner: AlertingQueryRunner;\n  private queries: AlertQuery[];\n\n  constructor(props: Props) {\n    super(props);\n    this.state = { panelDataByRefId: {} };\n    this.runner = new AlertingQueryRunner();\n    this.queries = props.value ?? [];\n  }\n\n  componentDidMount() {\n    this.runner.get().subscribe((data) => {\n      this.setState({ panelDataByRefId: data });\n    });\n  }\n\n  componentWillUnmount() {\n    this.runner.destroy();\n  }\n\n  onRunQueries = () => {\n    const { queries } = this;\n    this.runner.run(queries);\n  };\n\n  onCancelQueries = () => {\n    this.runner.cancel();\n  };\n\n  onChangeQueries = (queries: AlertQuery[]) => {\n    this.queries = queries;\n    this.props.onChange(queries);\n  };\n\n  onDuplicateQuery = (query: AlertQuery) => {\n    const { queries } = this;\n    this.onChangeQueries(addQuery(queries, query));\n  };\n\n  onNewAlertingQuery = () => {\n    const { queries } = this;\n    const defaultDataSource = getDatasourceSrv().getInstanceSettings('default');\n\n    if (!defaultDataSource) {\n      return;\n    }\n\n    this.onChangeQueries(\n      addQuery(queries, {\n        datasourceUid: defaultDataSource.uid,\n        model: {\n          refId: '',\n          datasource: {\n            type: defaultDataSource.type,\n            uid: defaultDataSource.uid,\n          },\n        },\n      })\n    );\n  };\n\n  onNewExpressionQuery = () => {\n    const { queries } = this;\n\n    this.onChangeQueries(\n      addQuery(queries, {\n        datasourceUid: ExpressionDatasourceUID,\n        model: expressionDatasource.newQuery({\n          type: ExpressionQueryType.classic,\n          conditions: [defaultCondition],\n        }),\n      })\n    );\n  };\n\n  renderAddQueryRow(styles: ReturnType<typeof getStyles>) {\n    return (\n      <HorizontalGroup spacing=\"md\" align=\"flex-start\">\n        <Button\n          type=\"button\"\n          icon=\"plus\"\n          onClick={this.onNewAlertingQuery}\n          variant=\"secondary\"\n          aria-label={selectors.components.QueryTab.addQuery}\n        >\n          Query\n        </Button>\n        {config.expressionsEnabled && (\n          <Tooltip content=\"Beta feature: queries could stop working in next version\" placement=\"right\">\n            <Button\n              type=\"button\"\n              icon=\"plus\"\n              onClick={this.onNewExpressionQuery}\n              variant=\"secondary\"\n              className={styles.expressionButton}\n            >\n              <span>Expression&nbsp;</span>\n              <Icon name=\"exclamation-triangle\" className=\"muted\" size=\"sm\" />\n            </Button>\n          </Tooltip>\n        )}\n      </HorizontalGroup>\n    );\n  }\n\n  isRunning() {\n    const data = Object.values(this.state.panelDataByRefId).find((d) => Boolean(d));\n    return data?.state === LoadingState.Loading;\n  }\n\n  renderRunQueryButton() {\n    const isRunning = this.isRunning();\n    const styles = getStyles(config.theme2);\n\n    if (isRunning) {\n      return (\n        <div className={styles.runWrapper}>\n          <Button icon=\"fa fa-spinner\" type=\"button\" variant=\"destructive\" onClick={this.onCancelQueries}>\n            Cancel\n          </Button>\n        </div>\n      );\n    }\n\n    return (\n      <div className={styles.runWrapper}>\n        <Button icon=\"sync\" type=\"button\" onClick={this.onRunQueries}>\n          Run queries\n        </Button>\n      </div>\n    );\n  }\n\n  render() {\n    const { value = [] } = this.props;\n    const { panelDataByRefId } = this.state;\n    const styles = getStyles(config.theme2);\n\n    return (\n      <div className={styles.container}>\n        <QueryRows\n          data={panelDataByRefId}\n          queries={value}\n          onQueriesChange={this.onChangeQueries}\n          onDuplicateQuery={this.onDuplicateQuery}\n          onRunQueries={this.onRunQueries}\n        />\n        {this.renderAddQueryRow(styles)}\n        {this.renderRunQueryButton()}\n      </div>\n    );\n  }\n}\n\nconst addQuery = (queries: AlertQuery[], queryToAdd: Pick<AlertQuery, 'model' | 'datasourceUid'>): AlertQuery[] => {\n  const refId = getNextRefIdChar(queries);\n\n  const query: AlertQuery = {\n    ...queryToAdd,\n    refId,\n    queryType: '',\n    model: {\n      ...queryToAdd.model,\n      hide: false,\n      refId,\n    },\n    relativeTimeRange: defaultTimeRange(queryToAdd.model),\n  };\n\n  return [...queries, query];\n};\n\nconst defaultTimeRange = (model: DataQuery): RelativeTimeRange | undefined => {\n  if (isExpressionQuery(model)) {\n    return;\n  }\n\n  return getDefaultRelativeTimeRange();\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.primary};\n      height: 100%;\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n    runWrapper: css`\n      margin-top: ${theme.spacing(1)};\n    `,\n    editorWrapper: css`\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius()};\n    `,\n    expressionButton: css`\n      margin-right: ${theme.spacing(0.5)};\n    `,\n  };\n});\n","import React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Field, InputControl } from '@grafana/ui';\nimport { ExpressionEditor } from './ExpressionEditor';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { QueryEditor } from './QueryEditor';\n\nexport const QueryStep: FC = () => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  return (\n    <RuleEditorSection\n      stepNo={2}\n      title={type === RuleFormType.cloudRecording ? 'Create a query to be recorded' : 'Create a query to be alerted on'}\n    >\n      {(type === RuleFormType.cloudRecording || type === RuleFormType.cloudAlerting) && dataSourceName && (\n        <Field error={errors.expression?.message} invalid={!!errors.expression?.message}>\n          <InputControl\n            name=\"expression\"\n            render={({ field: { ref, ...field } }) => <ExpressionEditor {...field} dataSourceName={dataSourceName} />}\n            control={control}\n            rules={{\n              required: { value: true, message: 'A valid expression is required' },\n            }}\n          />\n        </Field>\n      )}\n      {type === RuleFormType.grafana && (\n        <Field\n          invalid={!!errors.queries}\n          error={(!!errors.queries && 'Must provide at least one valid query.') || undefined}\n        >\n          <InputControl\n            name=\"queries\"\n            render={({ field: { ref, ...field } }) => <QueryEditor {...field} />}\n            control={control}\n            rules={{\n              validate: (queries) => Array.isArray(queries) && !!queries.length,\n            }}\n          />\n        </Field>\n      )}\n    </RuleEditorSection>\n  );\n};\n","import {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { getBackendSrv, toDataQueryError } from '@grafana/runtime';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport {\n  CloudPreviewRuleRequest,\n  GrafanaPreviewRuleRequest,\n  isCloudPreviewRequest,\n  isGrafanaPreviewRequest,\n  PreviewRuleRequest,\n  PreviewRuleResponse,\n} from '../types/preview';\nimport { RuleFormType } from '../types/rule-form';\n\nexport function previewAlertRule(request: PreviewRuleRequest): Observable<PreviewRuleResponse> {\n  if (isCloudPreviewRequest(request)) {\n    return previewCloudAlertRule(request);\n  }\n\n  if (isGrafanaPreviewRequest(request)) {\n    return previewGrafanaAlertRule(request);\n  }\n\n  throw new Error('unsupported preview rule request');\n}\n\ntype GrafanaPreviewRuleResponse = {\n  instances: DataFrameJSON[];\n};\n\nfunction previewGrafanaAlertRule(request: GrafanaPreviewRuleRequest): Observable<PreviewRuleResponse> {\n  const type = RuleFormType.grafana;\n\n  return withLoadingIndicator({\n    whileLoading: createResponse(type),\n    source: getBackendSrv()\n      .fetch<GrafanaPreviewRuleResponse>({\n        method: 'POST',\n        url: `/api/v1/rule/test/grafana`,\n        data: request,\n      })\n      .pipe(\n        map(({ data }) => {\n          return createResponse(type, {\n            state: LoadingState.Done,\n            series: data.instances.map(dataFrameFromJSON),\n          });\n        }),\n        catchError((error: Error) => {\n          return of(\n            createResponse(type, {\n              state: LoadingState.Error,\n              error: toDataQueryError(error),\n            })\n          );\n        }),\n        share()\n      ),\n  });\n}\n\nfunction createResponse(ruleType: RuleFormType, data: Partial<PanelData> = {}): PreviewRuleResponse {\n  return {\n    ruleType,\n    data: {\n      state: LoadingState.Loading,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n      ...data,\n    },\n  };\n}\n\nfunction previewCloudAlertRule(request: CloudPreviewRuleRequest): Observable<PreviewRuleResponse> {\n  throw new Error('preview for cloud alerting rules is not implemented');\n}\n","import { PanelData } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { RuleFormType } from './rule-form';\n\nexport type PreviewRuleRequest = GrafanaPreviewRuleRequest | CloudPreviewRuleRequest;\n\nexport type GrafanaPreviewRuleRequest = {\n  grafana_condition: {\n    condition: string;\n    data: AlertQuery[];\n    now: string;\n  };\n};\n\nexport type CloudPreviewRuleRequest = {\n  dataSourceName: string;\n  expr: string;\n};\n\nexport type PreviewRuleResponse = {\n  ruleType: RuleFormType;\n  data: PanelData;\n};\n\nexport function isCloudPreviewRequest(request: PreviewRuleRequest): request is CloudPreviewRuleRequest {\n  return 'expr' in request;\n}\n\nexport function isGrafanaPreviewRequest(request: PreviewRuleRequest): request is GrafanaPreviewRuleRequest {\n  return 'grafana_condition' in request;\n}\n","import React from 'react';\nimport { css } from '@emotion/css';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { TableCellDisplayMode, useStyles2 } from '@grafana/ui';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { FieldConfigSource, FieldMatcherID, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType } from '../../types/rule-form';\nimport { messageFromError } from '../../utils/redux';\n\ntype Props = {\n  preview: PreviewRuleResponse | undefined;\n};\n\nexport function PreviewRuleResult(props: Props): React.ReactElement | null {\n  const { preview } = props;\n  const styles = useStyles2(getStyles);\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [\n      {\n        matcher: { id: FieldMatcherID.byName, options: 'Info' },\n        properties: [{ id: 'custom.displayMode', value: TableCellDisplayMode.JSONView }],\n      },\n    ],\n  };\n\n  if (!preview) {\n    return null;\n  }\n\n  const { data, ruleType } = preview;\n\n  if (data.state === LoadingState.Loading) {\n    return (\n      <div className={styles.container}>\n        <span>Loading preview...</span>\n      </div>\n    );\n  }\n\n  if (data.state === LoadingState.Error) {\n    return (\n      <div className={styles.container}>\n        {data.error ? messageFromError(data.error) : 'Failed to preview alert rule'}\n      </div>\n    );\n  }\n  return (\n    <div className={styles.container}>\n      <span>\n        Preview based on the result of running the query, for this moment.{' '}\n        {ruleType === RuleFormType.grafana ? 'Configuration for `no data` and `error handling` is not applied.' : null}\n      </span>\n      <div className={styles.table}>\n        <AutoSizer>\n          {({ width, height }) => (\n            <div style={{ width: `${width}px`, height: `${height}px` }}>\n              <PanelRenderer\n                title=\"\"\n                width={width}\n                height={height}\n                pluginId=\"table\"\n                data={data}\n                fieldConfig={fieldConfig}\n              />\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      margin: ${theme.spacing(2)} 0;\n    `,\n    table: css`\n      flex: 1 1 auto;\n      height: 135px;\n      margin-top: ${theme.spacing(2)};\n      border: 1px solid ${theme.colors.border.medium};\n      border-radius: ${theme.shape.borderRadius(1)};\n    `,\n  };\n}\n","import React, { useCallback, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { useFormContext } from 'react-hook-form';\nimport { takeWhile } from 'rxjs/operators';\nimport { useMountedState } from 'react-use';\nimport { Button, HorizontalGroup, useStyles2 } from '@grafana/ui';\nimport { dateTimeFormatISO, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { RuleFormType } from '../../types/rule-form';\nimport { PreviewRuleRequest, PreviewRuleResponse } from '../../types/preview';\nimport { previewAlertRule } from '../../api/preview';\nimport { PreviewRuleResult } from './PreviewRuleResult';\n\nconst fields: string[] = ['type', 'dataSourceName', 'condition', 'queries', 'expression'];\n\nexport function PreviewRule(): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  const [preview, onPreview] = usePreview();\n  const { watch } = useFormContext();\n  const [type, condition] = watch(['type', 'condition']);\n\n  if (type === RuleFormType.cloudRecording || type === RuleFormType.cloudAlerting) {\n    return null;\n  }\n\n  return (\n    <div className={styles.container}>\n      <HorizontalGroup>\n        <Button disabled={!condition} type=\"button\" variant=\"primary\" onClick={onPreview}>\n          Preview alerts\n        </Button>\n      </HorizontalGroup>\n      <PreviewRuleResult preview={preview} />\n    </div>\n  );\n}\n\nfunction usePreview(): [PreviewRuleResponse | undefined, () => void] {\n  const [preview, setPreview] = useState<PreviewRuleResponse | undefined>();\n  const { getValues } = useFormContext();\n  const isMounted = useMountedState();\n\n  const onPreview = useCallback(() => {\n    const values = getValues(fields);\n    const request = createPreviewRequest(values);\n\n    previewAlertRule(request)\n      .pipe(takeWhile((response) => !isCompleted(response), true))\n      .subscribe((response) => {\n        if (!isMounted()) {\n          return;\n        }\n        setPreview(response);\n      });\n  }, [getValues, isMounted]);\n\n  return [preview, onPreview];\n}\n\nfunction createPreviewRequest(values: any[]): PreviewRuleRequest {\n  const [type, dataSourceName, condition, queries, expression] = values;\n\n  switch (type) {\n    case RuleFormType.cloudAlerting:\n      return {\n        dataSourceName,\n        expr: expression,\n      };\n\n    case RuleFormType.grafana:\n      return {\n        grafana_condition: {\n          condition,\n          data: queries,\n          now: dateTimeFormatISO(Date.now()),\n        },\n      };\n\n    default:\n      throw new Error(`Alert type ${type} not supported by preview.`);\n  }\n}\n\nfunction isCompleted(response: PreviewRuleResponse): boolean {\n  switch (response.data.state) {\n    case LoadingState.Done:\n    case LoadingState.Error:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      margin-top: ${theme.spacing(2)};\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n}\n","import React, { FC } from 'react';\nimport { css } from '@emotion/css';\nimport { GrafanaTheme } from '@grafana/data';\nimport { Field, Input, InputControl, Select, useStyles } from '@grafana/ui';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { timeOptions } from '../../utils/time';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { PreviewRule } from './PreviewRule';\n\nexport const CloudConditionsStep: FC = () => {\n  const styles = useStyles(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const type = watch('type');\n\n  // cloud recording rules do not have alert conditions\n  if (type === RuleFormType.cloudRecording) {\n    return null;\n  }\n\n  return (\n    <RuleEditorSection stepNo={3} title=\"Define alert conditions\">\n      <Field label=\"For\" description=\"Expression has to be true for this long for the alert to be fired.\">\n        <div className={styles.flexRow}>\n          <Field invalid={!!errors.forTime?.message} error={errors.forTime?.message} className={styles.inlineField}>\n            <Input\n              {...register('forTime', { pattern: { value: /^\\d+$/, message: 'Must be a positive integer.' } })}\n              width={8}\n            />\n          </Field>\n          <InputControl\n            name=\"forTimeUnit\"\n            render={({ field: { onChange, ref, ...field } }) => (\n              <Select\n                menuShouldPortal\n                {...field}\n                options={timeOptions}\n                onChange={(value) => onChange(value?.value)}\n                width={15}\n                className={styles.timeUnit}\n              />\n            )}\n            control={control}\n          />\n        </div>\n      </Field>\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  timeUnit: css`\n    margin-left: ${theme.spacing.xs};\n  `,\n});\n","import { SelectableValue } from '@grafana/data';\nimport { Field, InputControl, Select } from '@grafana/ui';\nimport { ExpressionDatasourceUID } from 'app/features/expressions/ExpressionDatasource';\nimport React, { FC, useEffect, useMemo } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\n\nexport const ConditionField: FC = () => {\n  const {\n    watch,\n    setValue,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const queries = watch('queries');\n  const condition = watch('condition');\n\n  const options = useMemo(\n    (): SelectableValue[] =>\n      queries\n        .filter((q) => !!q.refId)\n        .map((q) => ({\n          value: q.refId,\n          label: q.refId,\n        })),\n    [queries]\n  );\n\n  // reset condition if option no longer exists or if it is unset, but there are options available\n  useEffect(() => {\n    const expressions = queries.filter((query) => query.datasourceUid === ExpressionDatasourceUID);\n    if (condition && !options.find(({ value }) => value === condition)) {\n      setValue('condition', expressions.length ? expressions[expressions.length - 1].refId : null);\n    } else if (!condition && expressions.length) {\n      setValue('condition', expressions[expressions.length - 1].refId);\n    }\n  }, [condition, options, queries, setValue]);\n\n  return (\n    <Field\n      label=\"Condition\"\n      description=\"The query or expression that will be alerted on\"\n      error={errors.condition?.message}\n      invalid={!!errors.condition?.message}\n    >\n      <InputControl\n        name=\"condition\"\n        render={({ field: { onChange, ref, ...field } }) => (\n          <Select\n            menuShouldPortal\n            aria-label=\"Condition\"\n            {...field}\n            width={42}\n            options={options}\n            onChange={(v: SelectableValue) => onChange(v?.value ?? null)}\n            noOptionsMessage=\"No queries defined\"\n          />\n        )}\n        rules={{\n          required: {\n            value: true,\n            message: 'Please select the condition to alert on',\n          },\n        }}\n      />\n    </Field>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { SelectBaseProps } from '@grafana/ui/src/components/Select/types';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\nimport React, { FC, useMemo } from 'react';\n\ntype Props = Omit<SelectBaseProps<GrafanaAlertStateDecision>, 'options'> & {\n  includeNoData: boolean;\n  includeError: boolean;\n};\n\nconst options: SelectableValue[] = [\n  { value: GrafanaAlertStateDecision.Alerting, label: 'Alerting' },\n  { value: GrafanaAlertStateDecision.NoData, label: 'No Data' },\n  { value: GrafanaAlertStateDecision.OK, label: 'OK' },\n  { value: GrafanaAlertStateDecision.Error, label: 'Error' },\n];\n\nexport const GrafanaAlertStatePicker: FC<Props> = ({ includeNoData, includeError, ...props }) => {\n  const opts = useMemo(() => {\n    if (!includeNoData) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.NoData);\n    }\n    if (!includeError) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.Error);\n    }\n    return options;\n  }, [includeNoData, includeError]);\n  return <Select menuShouldPortal options={opts} {...props} />;\n};\n","import { durationToMilliseconds, parseDuration } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport { isEmpty } from 'lodash';\nimport React, { FC } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\n\n// a warning that will be shown if a problematic yet technically valid combination of \"evaluate every\" and \"evaluate for\" is enetered\nexport const GrafanaConditionEvalWarning: FC = () => {\n  const { watch } = useFormContext<RuleFormValues>();\n  const evaluateFor = watch('evaluateFor');\n  const evaluateEvery = watch('evaluateEvery');\n  if (evaluateFor === '0') {\n    return null;\n  }\n  const durationFor = parseDuration(evaluateFor);\n  const durationEvery = parseDuration(evaluateEvery);\n  if (isEmpty(durationFor) || isEmpty(durationEvery)) {\n    return null;\n  }\n  const millisFor = durationToMilliseconds(durationFor);\n  const millisEvery = durationToMilliseconds(durationEvery);\n  if (millisFor && millisEvery && millisFor <= millisEvery) {\n    return (\n      <Alert severity=\"warning\" title=\"\">\n        Setting a &quot;for&quot; duration that is less than or equal to the evaluation interval will result in the\n        evaluation interval being used to calculate when an alert that has stopped receiving data will be closed.\n      </Alert>\n    );\n  }\n  return null;\n};\n","import React, { FC, useState } from 'react';\nimport { css } from '@emotion/css';\nimport { parseDuration, durationToMilliseconds, GrafanaTheme2 } from '@grafana/data';\nimport { Field, InlineLabel, Input, InputControl, useStyles2 } from '@grafana/ui';\nimport { useFormContext, RegisterOptions } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { positiveDurationValidationPattern, durationValidationPattern } from '../../utils/time';\nimport { ConditionField } from './ConditionField';\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { PreviewRule } from './PreviewRule';\nimport { GrafanaConditionEvalWarning } from './GrafanaConditionEvalWarning';\nimport { CollapseToggle } from '../CollapseToggle';\n\nconst MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\n\nconst forValidationOptions: RegisterOptions = {\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  pattern: durationValidationPattern,\n};\n\nconst evaluateEveryValidationOptions: RegisterOptions = {\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  pattern: positiveDurationValidationPattern,\n  validate: (value: string) => {\n    const duration = parseDuration(value);\n    if (Object.keys(duration).length) {\n      const diff = durationToMilliseconds(duration);\n      if (diff < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n      if (diff % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n    }\n    return true;\n  },\n};\n\nexport const GrafanaConditionsStep: FC = () => {\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const evaluateEveryId = 'eval-every-input';\n  const evaluateForId = 'eval-for-input';\n\n  return (\n    <RuleEditorSection stepNo={3} title=\"Define alert conditions\">\n      <ConditionField />\n      <Field label=\"Evaluate\">\n        <div className={styles.flexRow}>\n          <InlineLabel\n            htmlFor={evaluateEveryId}\n            width={16}\n            tooltip=\"How often the alert will be evaluated to see if it fires\"\n          >\n            Evaluate every\n          </InlineLabel>\n          <Field\n            className={styles.inlineField}\n            error={errors.evaluateEvery?.message}\n            invalid={!!errors.evaluateEvery?.message}\n            validationMessageHorizontalOverflow={true}\n          >\n            <Input id={evaluateEveryId} width={8} {...register('evaluateEvery', evaluateEveryValidationOptions)} />\n          </Field>\n          <InlineLabel\n            htmlFor={evaluateForId}\n            width={7}\n            tooltip='Once condition is breached, alert will go into pending state. If it is pending for longer than the \"for\" value, it will become a firing alert.'\n          >\n            for\n          </InlineLabel>\n          <Field\n            className={styles.inlineField}\n            error={errors.evaluateFor?.message}\n            invalid={!!errors.evaluateFor?.message}\n            validationMessageHorizontalOverflow={true}\n          >\n            <Input id={evaluateForId} width={8} {...register('evaluateFor', forValidationOptions)} />\n          </Field>\n        </div>\n      </Field>\n      <GrafanaConditionEvalWarning />\n      <CollapseToggle\n        isCollapsed={!showErrorHandling}\n        onToggle={(collapsed) => setShowErrorHandling(!collapsed)}\n        text=\"Configure no data and error handling\"\n        className={styles.collapseToggle}\n      />\n      {showErrorHandling && (\n        <>\n          <Field htmlFor=\"no-data-state-input\" label=\"Alert state if no data or all values are null\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"no-data-state-input\"\n                  width={42}\n                  includeNoData={true}\n                  includeError={false}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"noDataState\"\n            />\n          </Field>\n          <Field htmlFor=\"exec-err-state-input\" label=\"Alert state if execution error or timeout\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <GrafanaAlertStatePicker\n                  {...field}\n                  inputId=\"exec-err-state-input\"\n                  width={42}\n                  includeNoData={false}\n                  includeError={true}\n                  onChange={(value) => onChange(value?.value)}\n                />\n              )}\n              name=\"execErrState\"\n            />\n          </Field>\n        </>\n      )}\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css`\n    margin-bottom: 0;\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n    align-items: flex-start;\n  `,\n  collapseToggle: css`\n    margin: ${theme.spacing(2, 0, 2, -1)};\n  `,\n});\n","import React, { FC, useMemo } from 'react';\nimport { GrafanaTheme2, AppEvents } from '@grafana/data';\nimport { PageToolbar, Button, useStyles2, CustomScrollbar, Spinner } from '@grafana/ui';\nimport { css } from '@emotion/css';\n\nimport { AlertTypeStep } from './AlertTypeStep';\nimport { DetailsStep } from './DetailsStep';\nimport { QueryStep } from './QueryStep';\nimport { useForm, FormProvider } from 'react-hook-form';\n\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { saveRuleFormAction } from '../../state/actions';\nimport { RuleWithLocation } from 'app/types/unified-alerting';\nimport { useDispatch } from 'react-redux';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { rulerRuleToFormValues, getDefaultFormValues, getDefaultQueries } from '../../utils/rule-form';\nimport { Link } from 'react-router-dom';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { appEvents } from 'app/core/core';\nimport { CloudConditionsStep } from './CloudConditionsStep';\nimport { GrafanaConditionsStep } from './GrafanaConditionsStep';\n\ntype Props = {\n  existing?: RuleWithLocation;\n};\n\nexport const AlertRuleForm: FC<Props> = ({ existing }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n\n  const returnTo: string = (queryParams['returnTo'] as string | undefined) ?? '/alerting/list';\n\n  const defaultValues: RuleFormValues = useMemo(() => {\n    if (existing) {\n      return rulerRuleToFormValues(existing);\n    }\n    return {\n      ...getDefaultFormValues(),\n      queries: getDefaultQueries(),\n      ...(queryParams['defaults'] ? JSON.parse(queryParams['defaults'] as string) : {}),\n    };\n  }, [existing, queryParams]);\n\n  const formAPI = useForm<RuleFormValues>({\n    mode: 'onSubmit',\n    defaultValues,\n    shouldFocusError: true,\n  });\n\n  const { handleSubmit, watch } = formAPI;\n\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  const showStep2 = Boolean(type && (type === RuleFormType.grafana || !!dataSourceName));\n\n  const submitState = useUnifiedAlertingSelector((state) => state.ruleForm.saveRule) || initialAsyncRequestState;\n  useCleanup((state) => state.unifiedAlerting.ruleForm.saveRule);\n\n  const submit = (values: RuleFormValues, exitOnSave: boolean) => {\n    dispatch(\n      saveRuleFormAction({\n        values: {\n          ...defaultValues,\n          ...values,\n          annotations:\n            values.annotations\n              ?.map(({ key, value }) => ({ key: key.trim(), value: value.trim() }))\n              .filter(({ key, value }) => !!key && !!value) ?? [],\n          labels:\n            values.labels\n              ?.map(({ key, value }) => ({ key: key.trim(), value: value.trim() }))\n              .filter(({ key }) => !!key) ?? [],\n        },\n        existing,\n        redirectOnSave: exitOnSave ? returnTo : undefined,\n      })\n    );\n  };\n\n  const onInvalid = () => {\n    appEvents.emit(AppEvents.alertError, ['There are errors in the form. Please correct them and try again!']);\n  };\n\n  return (\n    <FormProvider {...formAPI}>\n      <form onSubmit={(e) => e.preventDefault()} className={styles.form}>\n        <PageToolbar title=\"Create alert rule\" pageIcon=\"bell\">\n          <Link to={returnTo}>\n            <Button variant=\"secondary\" disabled={submitState.loading} type=\"button\" fill=\"outline\">\n              Cancel\n            </Button>\n          </Link>\n          <Button\n            variant=\"primary\"\n            type=\"button\"\n            onClick={handleSubmit((values) => submit(values, false), onInvalid)}\n            disabled={submitState.loading}\n          >\n            {submitState.loading && <Spinner className={styles.buttonSpinner} inline={true} />}\n            Save\n          </Button>\n          <Button\n            variant=\"primary\"\n            type=\"button\"\n            onClick={handleSubmit((values) => submit(values, true), onInvalid)}\n            disabled={submitState.loading}\n          >\n            {submitState.loading && <Spinner className={styles.buttonSpinner} inline={true} />}\n            Save and exit\n          </Button>\n        </PageToolbar>\n        <div className={styles.contentOuter}>\n          <CustomScrollbar autoHeightMin=\"100%\" hideHorizontalTrack={true}>\n            <div className={styles.contentInner}>\n              <AlertTypeStep editingExistingRule={!!existing} />\n              {showStep2 && (\n                <>\n                  <QueryStep />\n                  {type === RuleFormType.grafana ? <GrafanaConditionsStep /> : <CloudConditionsStep />}\n                  <DetailsStep />\n                </>\n              )}\n            </div>\n          </CustomScrollbar>\n        </div>\n      </form>\n    </FormProvider>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    buttonSpinner: css`\n      margin-right: ${theme.spacing(1)};\n    `,\n    form: css`\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `,\n    contentInner: css`\n      flex: 1;\n      padding: ${theme.spacing(2)};\n    `,\n    contentOuter: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.borderRadius()};\n      margin: ${theme.spacing(0, 2, 2)};\n      overflow: hidden;\n      flex: 1;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LinkButton, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { RuleIdentifier } from 'app/types/unified-alerting';\nimport React, { FC, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AlertRuleForm } from './components/rule-editor/AlertRuleForm';\nimport { useIsRuleEditable } from './hooks/useIsRuleEditable';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchEditableRuleAction } from './state/actions';\nimport * as ruleId from './utils/rule-id';\n\ninterface ExistingRuleEditorProps {\n  identifier: RuleIdentifier;\n}\n\nconst ExistingRuleEditor: FC<ExistingRuleEditorProps> = ({ identifier }) => {\n  useCleanup((state) => state.unifiedAlerting.ruleForm.existingRule);\n  const { loading, result, error, dispatched } = useUnifiedAlertingSelector((state) => state.ruleForm.existingRule);\n  const dispatch = useDispatch();\n  const { isEditable } = useIsRuleEditable(ruleId.ruleIdentifierToRuleSourceName(identifier), result?.rule);\n\n  useEffect(() => {\n    if (!dispatched) {\n      dispatch(fetchEditableRuleAction(identifier));\n    }\n  }, [dispatched, dispatch, identifier]);\n\n  if (loading || isEditable === undefined) {\n    return (\n      <Page.Contents>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </Page.Contents>\n    );\n  }\n  if (error) {\n    return (\n      <Page.Contents>\n        <Alert severity=\"error\" title=\"Failed to load rule\">\n          {error.message}\n        </Alert>\n      </Page.Contents>\n    );\n  }\n  if (!result) {\n    return <AlertWarning title=\"Rule not found\">Sorry! This rule does not exist.</AlertWarning>;\n  }\n  if (isEditable === false) {\n    return <AlertWarning title=\"Cannot edit rule\">Sorry! You do not have permission to edit this rule.</AlertWarning>;\n  }\n  return <AlertRuleForm existing={result} />;\n};\n\ntype RuleEditorProps = GrafanaRouteComponentProps<{ id?: string }>;\n\nconst RuleEditor: FC<RuleEditorProps> = ({ match }) => {\n  const { id } = match.params;\n  const identifier = ruleId.tryParse(id, true);\n\n  if (identifier) {\n    return <ExistingRuleEditor key={id} identifier={identifier} />;\n  }\n  if (!(contextSrv.hasEditPermissionInFolders || contextSrv.isEditor)) {\n    return <AlertWarning title=\"Cannot create rules\">Sorry! You are not allowed to create rules.</AlertWarning>;\n  }\n  return <AlertRuleForm />;\n};\n\nconst AlertWarning: FC<{ title: string }> = ({ title, children }) => (\n  <Alert className={useStyles2(warningStyles).warning} severity=\"warning\" title={title}>\n    <p>{children}</p>\n    <LinkButton href=\"alerting/list\">To rule list</LinkButton>\n  </Alert>\n);\n\nconst warningStyles = (theme: GrafanaTheme2) => ({\n  warning: css`\n    margin: ${theme.spacing(4)};\n  `,\n});\n\nexport default withErrorBoundary(RuleEditor, { style: 'page' });\n","import { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport React, { useMemo } from 'react';\nimport { STAT, TABLE, TIMESERIES } from '../utils/constants';\n\nexport type SupportedPanelPlugins = 'timeseries' | 'table' | 'stat';\n\ntype Props = {\n  value: SupportedPanelPlugins;\n  onChange: (value: SupportedPanelPlugins) => void;\n  size?: 'sm' | 'md';\n};\n\nexport function PanelPluginsButtonGroup(props: Props): JSX.Element | null {\n  const { value, onChange, size = 'md' } = props;\n  const panels = useMemo(() => getSupportedPanels(), []);\n\n  return <RadioButtonGroup options={panels} value={value} onChange={onChange} size={size} />;\n}\n\nfunction getSupportedPanels(): Array<SelectableValue<SupportedPanelPlugins>> {\n  return Object.values(config.panels).reduce((panels: Array<SelectableValue<SupportedPanelPlugins>>, panel) => {\n    if (isSupportedPanelPlugin(panel.id)) {\n      panels.push({\n        value: panel.id,\n        label: panel.name,\n        imgUrl: panel.info.logos.small,\n      });\n    }\n    return panels;\n  }, []);\n}\n\nfunction isSupportedPanelPlugin(id: string): id is SupportedPanelPlugins {\n  switch (id) {\n    case TIMESERIES:\n    case TABLE:\n    case STAT:\n      return true;\n    default:\n      return false;\n  }\n}\n","import { SelectableValue } from '@grafana/data';\nimport React, { FC, useMemo } from 'react';\nimport { SelectWithAdd } from './SelectWIthAdd';\nimport { Annotation, annotationLabels } from '../../utils/constants';\n\ninterface Props {\n  onChange: (value: string) => void;\n  existingKeys: string[];\n\n  value?: string;\n  width?: number;\n  className?: string;\n  'aria-label'?: string;\n}\n\nexport const AnnotationKeyInput: FC<Props> = ({ value, existingKeys, 'aria-label': ariaLabel, ...rest }) => {\n  const annotationOptions = useMemo(\n    (): SelectableValue[] =>\n      Object.values(Annotation)\n        .filter((key) => !existingKeys.includes(key)) // remove keys already taken in other annotations\n        .map((key) => ({ value: key, label: annotationLabels[key] })),\n    [existingKeys]\n  );\n\n  return (\n    <SelectWithAdd\n      aria-label={ariaLabel}\n      value={value}\n      options={annotationOptions}\n      custom={!!value && !(Object.values(Annotation) as string[]).includes(value)}\n      {...rest}\n    />\n  );\n};\n","import React, { FC, useCallback } from 'react';\nimport { Button, Field, FieldArray, Input, InputControl, Label, TextArea, useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext } from 'react-hook-form';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { AnnotationKeyInput } from './AnnotationKeyInput';\n\nconst AnnotationsField: FC = () => {\n  const styles = useStyles(getStyles);\n  const {\n    control,\n    register,\n    watch,\n    formState: { errors },\n  } = useFormContext();\n  const annotations = watch('annotations') as RuleFormValues['annotations'];\n\n  const existingKeys = useCallback(\n    (index: number): string[] => annotations.filter((_, idx: number) => idx !== index).map(({ key }) => key),\n    [annotations]\n  );\n\n  return (\n    <>\n      <Label>Summary and annotations</Label>\n      <FieldArray name={'annotations'} control={control}>\n        {({ fields, append, remove }) => {\n          return (\n            <div className={styles.flexColumn}>\n              {fields.map((field, index) => {\n                const isUrl = annotations[index]?.key?.toLocaleLowerCase().endsWith('url');\n                const ValueInputComponent = isUrl ? Input : TextArea;\n                return (\n                  <div key={field.id} className={styles.flexRow}>\n                    <Field\n                      className={styles.field}\n                      invalid={!!errors.annotations?.[index]?.key?.message}\n                      error={errors.annotations?.[index]?.key?.message}\n                      data-testid={`annotation-key-${index}`}\n                    >\n                      <InputControl\n                        name={`annotations[${index}].key`}\n                        render={({ field: { ref, ...field } }) => (\n                          <AnnotationKeyInput\n                            {...field}\n                            aria-label={`Annotation detail ${index + 1}`}\n                            existingKeys={existingKeys(index)}\n                            width={18}\n                          />\n                        )}\n                        control={control}\n                        rules={{ required: { value: !!annotations[index]?.value, message: 'Required.' } }}\n                      />\n                    </Field>\n                    <Field\n                      className={cx(styles.flexRowItemMargin, styles.field)}\n                      invalid={!!errors.annotations?.[index]?.value?.message}\n                      error={errors.annotations?.[index]?.value?.message}\n                    >\n                      <ValueInputComponent\n                        data-testid={`annotation-value-${index}`}\n                        className={cx(styles.annotationValueInput, { [styles.textarea]: !isUrl })}\n                        {...register(`annotations[${index}].value`)}\n                        placeholder={isUrl ? 'https://' : `Text`}\n                        defaultValue={field.value}\n                      />\n                    </Field>\n                    <Button\n                      type=\"button\"\n                      className={styles.flexRowItemMargin}\n                      aria-label=\"delete annotation\"\n                      icon=\"trash-alt\"\n                      variant=\"secondary\"\n                      onClick={() => remove(index)}\n                    />\n                  </div>\n                );\n              })}\n              <Button\n                className={styles.addAnnotationsButton}\n                icon=\"plus-circle\"\n                type=\"button\"\n                variant=\"secondary\"\n                onClick={() => {\n                  append({ key: '', value: '' });\n                }}\n              >\n                Add info\n              </Button>\n            </div>\n          );\n        }}\n      </FieldArray>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  annotationValueInput: css`\n    width: 426px;\n  `,\n  textarea: css`\n    height: 76px;\n  `,\n  addAnnotationsButton: css`\n    flex-grow: 0;\n    align-self: flex-start;\n    margin-left: 148px;\n  `,\n  flexColumn: css`\n    display: flex;\n    flex-direction: column;\n  `,\n  field: css`\n    margin-bottom: ${theme.spacing.xs};\n  `,\n  flexRow: css`\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-start;\n  `,\n  flexRowItemMargin: css`\n    margin-left: ${theme.spacing.xs};\n  `,\n});\n\nexport default AnnotationsField;\n","import React, { FC } from 'react';\nimport { Button, Field, FieldArray, Input, InlineLabel, Label, useStyles } from '@grafana/ui';\nimport { GrafanaTheme } from '@grafana/data';\nimport { css, cx } from '@emotion/css';\nimport { useFormContext } from 'react-hook-form';\n\ninterface Props {\n  className?: string;\n}\n\nconst LabelsField: FC<Props> = ({ className }) => {\n  const styles = useStyles(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext();\n  const labels = watch('labels');\n  return (\n    <div className={cx(className, styles.wrapper)}>\n      <Label>Custom Labels</Label>\n      <FieldArray control={control} name=\"labels\">\n        {({ fields, append, remove }) => {\n          return (\n            <>\n              <div className={styles.flexRow}>\n                <InlineLabel width={18}>Labels</InlineLabel>\n                <div className={styles.flexColumn}>\n                  {fields.map((field, index) => {\n                    return (\n                      <div key={field.id}>\n                        <div className={cx(styles.flexRow, styles.centerAlignRow)}>\n                          <Field\n                            className={styles.labelInput}\n                            invalid={!!errors.labels?.[index]?.key?.message}\n                            error={errors.labels?.[index]?.key?.message}\n                          >\n                            <Input\n                              {...register(`labels[${index}].key`, {\n                                required: { value: !!labels[index]?.value, message: 'Required.' },\n                              })}\n                              placeholder=\"key\"\n                              data-testid={`label-key-${index}`}\n                              defaultValue={field.key}\n                            />\n                          </Field>\n                          <InlineLabel className={styles.equalSign}>=</InlineLabel>\n                          <Field\n                            className={styles.labelInput}\n                            invalid={!!errors.labels?.[index]?.value?.message}\n                            error={errors.labels?.[index]?.value?.message}\n                          >\n                            <Input\n                              {...register(`labels[${index}].value`, {\n                                required: { value: !!labels[index]?.key, message: 'Required.' },\n                              })}\n                              placeholder=\"value\"\n                              data-testid={`label-value-${index}`}\n                              defaultValue={field.value}\n                            />\n                          </Field>\n                          <Button\n                            className={styles.deleteLabelButton}\n                            aria-label=\"delete label\"\n                            icon=\"trash-alt\"\n                            variant=\"secondary\"\n                            onClick={() => {\n                              remove(index);\n                            }}\n                          />\n                        </div>\n                      </div>\n                    );\n                  })}\n                  <Button\n                    className={styles.addLabelButton}\n                    icon=\"plus-circle\"\n                    type=\"button\"\n                    variant=\"secondary\"\n                    onClick={() => {\n                      append({});\n                    }}\n                  >\n                    Add label\n                  </Button>\n                </div>\n              </div>\n            </>\n          );\n        }}\n      </FieldArray>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      margin-top: ${theme.spacing.md};\n    `,\n    flexColumn: css`\n      display: flex;\n      flex-direction: column;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n\n      & + button {\n        margin-left: ${theme.spacing.xs};\n      }\n    `,\n    deleteLabelButton: css`\n      margin-left: ${theme.spacing.xs};\n      align-self: flex-start;\n    `,\n    addLabelButton: css`\n      flex-grow: 0;\n      align-self: flex-start;\n    `,\n    centerAlignRow: css`\n      align-items: baseline;\n    `,\n    equalSign: css`\n      align-self: flex-start;\n      width: 28px;\n      justify-content: center;\n      margin-left: ${theme.spacing.xs};\n    `,\n    labelInput: css`\n      width: 183px;\n      margin-bottom: ${theme.spacing.sm};\n      & + & {\n        margin-left: ${theme.spacing.sm};\n      }\n    `,\n  };\n};\n\nexport default LabelsField;\n","import { SelectableValue } from '@grafana/data';\nimport { Input, Select } from '@grafana/ui';\nimport React, { FC, useEffect, useMemo, useState } from 'react';\n\ninterface Props {\n  onChange: (value: string) => void;\n  options: Array<SelectableValue<string>>;\n  value?: string;\n  addLabel?: string;\n  className?: string;\n  placeholder?: string;\n  custom?: boolean;\n  onCustomChange?: (custom: boolean) => void;\n  width?: number;\n  disabled?: boolean;\n  'aria-label'?: string;\n}\n\nexport const SelectWithAdd: FC<Props> = ({\n  value,\n  onChange,\n  options,\n  className,\n  placeholder,\n  width,\n  custom,\n  onCustomChange,\n  disabled = false,\n  addLabel = '+ Add new',\n  'aria-label': ariaLabel,\n}) => {\n  const [isCustom, setIsCustom] = useState(custom);\n\n  useEffect(() => {\n    if (custom) {\n      setIsCustom(custom);\n    }\n  }, [custom]);\n\n  const _options = useMemo((): Array<SelectableValue<string>> => [...options, { value: '__add__', label: addLabel }], [\n    options,\n    addLabel,\n  ]);\n\n  if (isCustom) {\n    return (\n      <Input\n        aria-label={ariaLabel}\n        width={width}\n        autoFocus={!custom}\n        value={value || ''}\n        placeholder={placeholder}\n        className={className}\n        disabled={disabled}\n        onChange={(e) => onChange((e.target as HTMLInputElement).value)}\n      />\n    );\n  } else {\n    return (\n      <Select\n        menuShouldPortal\n        aria-label={ariaLabel}\n        width={width}\n        options={_options}\n        value={value}\n        className={className}\n        placeholder={placeholder}\n        disabled={disabled}\n        onChange={(val: SelectableValue) => {\n          const value = val?.value;\n          if (value === '__add__') {\n            setIsCustom(true);\n            if (onCustomChange) {\n              onCustomChange(true);\n            }\n            onChange('');\n          } else {\n            onChange(value);\n          }\n        }}\n      />\n    );\n  }\n};\n","import { FolderDTO } from 'app/types';\nimport { useDispatch } from 'react-redux';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nimport { useEffect } from 'react';\nimport { fetchFolderIfNotFetchedAction } from '../state/actions';\nimport { initialAsyncRequestState } from '../utils/redux';\n\ninterface ReturnBag {\n  folder?: FolderDTO;\n  loading: boolean;\n}\n\nexport function useFolder(uid?: string): ReturnBag {\n  const dispatch = useDispatch();\n  const folderRequests = useUnifiedAlertingSelector((state) => state.folders);\n  useEffect(() => {\n    if (uid) {\n      dispatch(fetchFolderIfNotFetchedAction(uid));\n    }\n  }, [dispatch, uid]);\n\n  if (uid) {\n    const request = folderRequests[uid] || initialAsyncRequestState;\n    return {\n      folder: request.result,\n      loading: request.loading,\n    };\n  }\n  return {\n    loading: false,\n  };\n}\n","import { contextSrv } from 'app/core/services/context_srv';\nimport { isGrafanaRulerRule } from '../utils/rules';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\nimport { useFolder } from './useFolder';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { checkIfLotexSupportsEditingRulesAction } from '../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface ResultBag {\n  isEditable?: boolean;\n  loading: boolean;\n}\n\nexport function useIsRuleEditable(rulesSourceName: string, rule?: RulerRuleDTO): ResultBag {\n  const checkEditingRequests = useUnifiedAlertingSelector((state) => state.lotexSupportsRuleEditing);\n  const dispatch = useDispatch();\n  const folderUID = rule && isGrafanaRulerRule(rule) ? rule.grafana_alert.namespace_uid : undefined;\n\n  const { folder, loading } = useFolder(folderUID);\n\n  useEffect(() => {\n    if (checkEditingRequests[rulesSourceName] === undefined && rulesSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n      dispatch(checkIfLotexSupportsEditingRulesAction(rulesSourceName));\n    }\n  }, [rulesSourceName, checkEditingRequests, dispatch]);\n\n  if (!rule) {\n    return { isEditable: false, loading: false };\n  }\n\n  // grafana rules can be edited if user can edit the folder they're in\n  if (isGrafanaRulerRule(rule)) {\n    if (!folderUID) {\n      throw new Error(\n        `Rule ${rule.grafana_alert.title} does not have a folder uid, cannot determine if it is editable.`\n      );\n    }\n    return {\n      isEditable: folder?.canSave,\n      loading,\n    };\n  }\n\n  // prom rules are only editable by users with Editor role and only if rules source supports editing\n  return {\n    isEditable: contextSrv.isEditor && !!checkEditingRequests[rulesSourceName]?.result,\n    loading: !!checkEditingRequests[rulesSourceName]?.loading,\n  };\n}\n","import { RelativeTimeRange } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { ExpressionQuery, ExpressionQueryType } from '../../../expressions/types';\n\nconst FALL_BACK_TIME_RANGE = { from: 21600, to: 0 };\n\nexport const getTimeRangeForExpression = (query: ExpressionQuery, queries: AlertQuery[]): RelativeTimeRange => {\n  const referencedRefIds: string[] | undefined = getReferencedIds(query, queries);\n\n  if (!referencedRefIds) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  const { from, to } = getTimeRanges(referencedRefIds, queries);\n\n  if (!from.length && !to.length) {\n    return FALL_BACK_TIME_RANGE;\n  }\n\n  return {\n    from: Math.max(...from),\n    to: Math.min(...to),\n  };\n};\n\nconst getReferencedIds = (model: ExpressionQuery, queries: AlertQuery[]): string[] | undefined => {\n  switch (model.type) {\n    case ExpressionQueryType.classic:\n      return getReferencedIdsForClassicCondition(model);\n    case ExpressionQueryType.math:\n      return getReferencedIdsForMath(model, queries);\n    case ExpressionQueryType.resample:\n    case ExpressionQueryType.reduce:\n      return getReferencedIdsForReduce(model);\n  }\n};\n\nconst getReferencedIdsForClassicCondition = (model: ExpressionQuery) => {\n  return model.conditions?.map((condition) => {\n    return condition.query.params[0];\n  });\n};\n\nconst getTimeRanges = (referencedRefIds: string[], queries: AlertQuery[]) => {\n  let from: number[] = [];\n  let to = [FALL_BACK_TIME_RANGE.to];\n  for (const referencedRefIdsKey of referencedRefIds) {\n    const query = queries.find((query) => query.refId === referencedRefIdsKey);\n\n    if (!query || !query.relativeTimeRange) {\n      continue;\n    }\n    from.push(query.relativeTimeRange.from);\n    to.push(query.relativeTimeRange.to);\n  }\n\n  return {\n    from,\n    to,\n  };\n};\n\nconst getReferencedIdsForMath = (model: ExpressionQuery, queries: AlertQuery[]) => {\n  return (\n    queries\n      // filter queries of type query and filter expression on if it includes any refIds\n      .filter((q) => q.queryType === 'query' && model.expression?.includes(q.refId))\n      .map((q) => {\n        return q.refId;\n      })\n  );\n};\n\nconst getReferencedIdsForReduce = (model: ExpressionQuery) => {\n  return model.expression ? [model.expression] : undefined;\n};\n","import { Observable, of, OperatorFunction, ReplaySubject, Unsubscribable } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  dataFrameFromJSON,\n  DataFrameJSON,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  rangeUtil,\n  TimeRange,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { FetchResponse, getDataSourceSrv, toDataQueryError } from '@grafana/runtime';\nimport { BackendSrv, getBackendSrv } from 'app/core/services/backend_srv';\nimport { preProcessPanelData } from 'app/features/query/state/runRequest';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\nimport { getTimeRangeForExpression } from '../utils/timeRange';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { setStructureRevision } from 'app/features/query/state/processing/revision';\nimport { cancelNetworkRequestsOnUnsubscribe } from 'app/features/query/state/processing/canceler';\n\nexport interface AlertingQueryResult {\n  frames: DataFrameJSON[];\n}\n\nexport interface AlertingQueryResponse {\n  results: Record<string, AlertingQueryResult>;\n}\nexport class AlertingQueryRunner {\n  private subject: ReplaySubject<Record<string, PanelData>>;\n  private subscription?: Unsubscribable;\n  private lastResult: Record<string, PanelData>;\n\n  constructor(private backendSrv = getBackendSrv(), private dataSourceSrv = getDataSourceSrv()) {\n    this.subject = new ReplaySubject(1);\n    this.lastResult = {};\n  }\n\n  get(): Observable<Record<string, PanelData>> {\n    return this.subject.asObservable();\n  }\n\n  async run(queries: AlertQuery[]) {\n    if (queries.length === 0) {\n      const empty = initialState(queries, LoadingState.Done);\n      return this.subject.next(empty);\n    }\n\n    // do not execute if one more of the queries are not runnable,\n    // for example not completely configured\n    for (const query of queries) {\n      if (!isExpressionQuery(query.model)) {\n        const ds = await this.dataSourceSrv.get(query.datasourceUid);\n        if (ds.filterQuery && !ds.filterQuery(query.model)) {\n          const empty = initialState(queries, LoadingState.Done);\n          return this.subject.next(empty);\n        }\n      }\n    }\n\n    this.subscription = runRequest(this.backendSrv, queries).subscribe({\n      next: (dataPerQuery) => {\n        const nextResult = applyChange(dataPerQuery, (refId, data) => {\n          const previous = this.lastResult[refId];\n          const preProcessed = preProcessPanelData(data, previous);\n          return setStructureRevision(preProcessed, previous);\n        });\n\n        this.lastResult = nextResult;\n        this.subject.next(this.lastResult);\n      },\n\n      error: (error: Error) => {\n        this.lastResult = mapErrorToPanelData(this.lastResult, error);\n        this.subject.next(this.lastResult);\n      },\n    });\n  }\n\n  cancel() {\n    if (!this.subscription) {\n      return;\n    }\n    this.subscription.unsubscribe();\n\n    let requestIsRunning = false;\n\n    const nextResult = applyChange(this.lastResult, (refId, data) => {\n      if (data.state === LoadingState.Loading) {\n        requestIsRunning = true;\n      }\n\n      return {\n        ...data,\n        state: LoadingState.Done,\n      };\n    });\n\n    if (requestIsRunning) {\n      this.subject.next(nextResult);\n    }\n  }\n\n  destroy() {\n    if (this.subject) {\n      this.subject.complete();\n    }\n\n    this.cancel();\n  }\n}\n\nconst runRequest = (backendSrv: BackendSrv, queries: AlertQuery[]): Observable<Record<string, PanelData>> => {\n  const initial = initialState(queries, LoadingState.Loading);\n  const request = {\n    data: { data: queries },\n    url: '/api/v1/eval',\n    method: 'POST',\n    requestId: uuidv4(),\n  };\n\n  return withLoadingIndicator({\n    whileLoading: initial,\n    source: backendSrv.fetch<AlertingQueryResponse>(request).pipe(\n      mapToPanelData(initial),\n      catchError((error) => of(mapErrorToPanelData(initial, error))),\n      cancelNetworkRequestsOnUnsubscribe(backendSrv, request.requestId),\n      share()\n    ),\n  });\n};\n\nconst initialState = (queries: AlertQuery[], state: LoadingState): Record<string, PanelData> => {\n  return queries.reduce((dataByQuery: Record<string, PanelData>, query) => {\n    dataByQuery[query.refId] = {\n      state,\n      series: [],\n      timeRange: getTimeRange(query, queries),\n    };\n\n    return dataByQuery;\n  }, {});\n};\n\nconst getTimeRange = (query: AlertQuery, queries: AlertQuery[]): TimeRange => {\n  if (isExpressionQuery(query.model)) {\n    const relative = getTimeRangeForExpression(query.model, queries);\n    return rangeUtil.relativeToTimeRange(relative);\n  }\n\n  if (!query.relativeTimeRange) {\n    console.warn(`Query with refId: ${query.refId} did not have any relative time range, using default.`);\n    return getDefaultTimeRange();\n  }\n\n  return rangeUtil.relativeToTimeRange(query.relativeTimeRange);\n};\n\nconst mapToPanelData = (\n  dataByQuery: Record<string, PanelData>\n): OperatorFunction<FetchResponse<AlertingQueryResponse>, Record<string, PanelData>> => {\n  return map((response) => {\n    const { data } = response;\n    const results: Record<string, PanelData> = {};\n\n    for (const [refId, result] of Object.entries(data.results)) {\n      results[refId] = {\n        timeRange: dataByQuery[refId].timeRange,\n        state: LoadingState.Done,\n        series: result.frames.map(dataFrameFromJSON),\n      };\n    }\n\n    return results;\n  });\n};\n\nconst mapErrorToPanelData = (lastResult: Record<string, PanelData>, error: Error): Record<string, PanelData> => {\n  const queryError = toDataQueryError(error);\n\n  return applyChange(lastResult, (refId, data) => {\n    return {\n      ...data,\n      state: LoadingState.Error,\n      error: queryError,\n    };\n  });\n};\n\nconst applyChange = (\n  initial: Record<string, PanelData>,\n  change: (refId: string, data: PanelData) => PanelData\n): Record<string, PanelData> => {\n  const nextResult: Record<string, PanelData> = {};\n\n  for (const [refId, data] of Object.entries(initial)) {\n    nextResult[refId] = change(refId, data);\n  }\n\n  return nextResult;\n};\n","import { DataQuery } from '@grafana/data';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { ExpressionQuery, ExpressionQueryType } from './types';\n\nexport const isExpressionQuery = (dataQuery?: DataQuery): dataQuery is ExpressionQuery => {\n  if (!dataQuery) {\n    return false;\n  }\n\n  if (isExpressionReference(dataQuery.datasource)) {\n    return true;\n  }\n\n  const expression = dataQuery as ExpressionQuery;\n\n  if (typeof expression.type !== 'string') {\n    return false;\n  }\n  return Object.values(ExpressionQueryType).includes(expression.type);\n};\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","useQueryParams","search","useLocation","useMemo","locationSearchToObject","useCallback","values","replace","setImmediate","locationService","RuleEditorSection","title","stepNo","children","description","styles","useStyles2","getStyles","className","parent","content","FieldSet","label","fieldset","theme","css","spacing","breakpoints","xl","colors","text","maxContrast","background","canvas","typography","size","lg","GroupAndNamespaceFields","rulesSourceName","control","watch","formState","errors","setValue","useFormContext","style","getStyle","customGroup","setCustomGroup","useState","rulerRequests","useUnifiedAlertingSelector","state","rulerRules","fetchRulerRulesAction","rulesConfig","result","namespace","namespaceOptions","Object","keys","map","value","groupOptions","group","name","flexRow","Field","error","message","invalid","InputControl","render","field","onChange","input","onCustomChange","custom","options","width","rules","required","CloudRulesSourcePicker","props","rulesSourcesWithRuler","checkEditingRequests","lotexSupportsRuleEditing","getRulesDataSources","filter","ds","undefined","forEach","checkIfLotexSupportsEditingRulesAction","useRulesSourcesWithRuler","dataSourceFilter","find","id","DataSourcePicker","noDefault","alerting","recordingRuleNameValidationPattern","AlertTypeStep","editingExistingRule","register","ruleFormType","dataSourceName","alertTypeOptions","RuleFormType","contextSrv","push","formInput","Input","pattern","autoFocus","disabled","type","Select","menuShouldPortal","v","folder","RuleFolderPicker","enableCreateNew","enableReset","DetailsStep","AnnotationsField","LabelsField","ExpressionEditor","mapToValue","mapToQuery","settings","getDataSourceSrv","getInstanceSettings","query","expr","existing","Error","useQueryMappers","setQuery","refId","hide","loading","dataSource","useAsync","get","onChangeQuery","components","QueryEditor","errorMessage","queries","app","CoreApp","onRunQuery","noop","datasource","VizWrapper","data","currentPanel","changePanel","onThresholdsChange","thresholds","setOptions","frameIndex","showHeader","vizHeight","pluginId","useTheme2","TIMESERIES","STAT","series","fields","dataIsEmpty","length","rowHeight","gridSize","tableHeight","useVizHeight","fieldConfig","setFieldConfig","defaults","overrides","unit","defaultUnit","thresholdsStyle","mode","defaultFieldConfig","context","eventBus","appEvents","canEditThresholds","wrapper","buttonGroup","PanelPluginsButtonGroup","height","PanelContextProvider","PanelRenderer","onOptionsChange","visHeight","config","QueryWrapper","dsSettings","index","onChangeDataSource","onChangeTimeRange","onRunQueries","onRemoveQuery","onDuplicateQuery","onChangeThreshold","isExpression","isExpressionQuery","model","changePluginId","TABLE","QueryEditorRow","cloneDeep","onAddQuery","renderHeaderExtras","RelativeTimeRangePicker","timeRange","relativeTimeRange","getDefaultRelativeTimeRange","range","renderTimePicker","visualization","LoadingState","hideDisableQuery","EmptyQueryWrapper","border","medium","shape","borderRadius","updateMathExpressionRefs","expression","previousRefId","newRefId","oldExpression","RegExp","newExpression","QueryRows","PureComponent","constructor","super","this","onQueriesChange","item","itemIndex","referencedRefId","conditions","params","condition","conditionIndex","evaluator","parseFloat","steps","toPrecision","previous","datasourceUid","uid","isMathExpression","isReduceExpression","isResampleExpression","isClassicExpression","isReferencing","param","queriesWithUpdatedReferences","queryType","destination","startIndex","source","endIndex","update","Array","from","removed","splice","record","isArray","threshold","ThresholdsMode","Infinity","color","dataPerQuery","thresholdByRefId","getThresholdsForQueries","onDragEnd","droppableId","direction","provided","ref","innerRef","droppableProps","getDataSourceSettings","DatasourceNotFound","onUpdateDatasource","defaultDataSource","getDatasourceSrv","placeholder","showDetails","setShowDetails","QueryOperationRow","draggable","isOpen","Card","heading","Icon","Button","variant","onClick","show","icon","fill","JSON","stringify","runner","run","cancel","onChangeQueries","addQuery","ExpressionDatasourceUID","expressionDatasource","ExpressionQueryType","defaultCondition","panelDataByRefId","AlertingQueryRunner","componentDidMount","subscribe","setState","componentWillUnmount","destroy","renderAddQueryRow","HorizontalGroup","align","onNewAlertingQuery","selectors","Tooltip","placement","onNewExpressionQuery","expressionButton","isRunning","d","Boolean","renderRunQueryButton","runWrapper","onCancelQueries","container","queryToAdd","getNextRefIdChar","defaultTimeRange","stylesFactory","primary","xxl","editorWrapper","QueryStep","validate","previewAlertRule","request","isCloudPreviewRequest","previewCloudAlertRule","isGrafanaPreviewRequest","withLoadingIndicator","whileLoading","createResponse","getBackendSrv","fetch","method","url","pipe","instances","dataFrameFromJSON","catchError","of","toDataQueryError","share","previewGrafanaAlertRule","ruleType","getDefaultTimeRange","PreviewRuleResult","preview","matcher","FieldMatcherID","properties","TableCellDisplayMode","messageFromError","table","PreviewRule","onPreview","setPreview","getValues","isMounted","useMountedState","grafana_condition","now","dateTimeFormatISO","Date","createPreviewRequest","takeWhile","response","isCompleted","usePreview","CloudConditionsStep","useStyles","forTime","inlineField","timeOptions","timeUnit","xs","ConditionField","q","expressions","noOptionsMessage","GrafanaAlertStateDecision","GrafanaAlertStatePicker","includeNoData","includeError","opts","opt","GrafanaConditionEvalWarning","evaluateFor","evaluateEvery","durationFor","parseDuration","durationEvery","isEmpty","millisFor","durationToMilliseconds","millisEvery","Alert","severity","forValidationOptions","durationValidationPattern","evaluateEveryValidationOptions","positiveDurationValidationPattern","duration","diff","MIN_TIME_RANGE_STEP_S","GrafanaConditionsStep","showErrorHandling","setShowErrorHandling","evaluateEveryId","evaluateForId","InlineLabel","htmlFor","tooltip","validationMessageHorizontalOverflow","CollapseToggle","isCollapsed","onToggle","collapsed","collapseToggle","inputId","AlertRuleForm","queryParams","returnTo","defaultValues","rulerRuleToFormValues","getDefaultFormValues","getDefaultQueries","parse","formAPI","useForm","shouldFocusError","handleSubmit","showStep2","submitState","ruleForm","saveRule","initialAsyncRequestState","unifiedAlerting","submit","exitOnSave","saveRuleFormAction","annotations","key","trim","labels","redirectOnSave","onInvalid","AppEvents","onSubmit","e","preventDefault","form","PageToolbar","pageIcon","Link","to","Spinner","buttonSpinner","inline","contentOuter","CustomScrollbar","autoHeightMin","hideHorizontalTrack","contentInner","weak","ExistingRuleEditor","identifier","existingRule","dispatched","isEditable","useIsRuleEditable","ruleId","rule","fetchEditableRuleAction","Page","LoadingPlaceholder","AlertWarning","warningStyles","warning","LinkButton","href","withErrorBoundary","match","panels","reduce","panel","isSupportedPanelPlugin","imgUrl","info","logos","small","RadioButtonGroup","AnnotationKeyInput","existingKeys","ariaLabel","rest","annotationOptions","Annotation","includes","annotationLabels","annotationValueInput","textarea","addAnnotationsButton","flexColumn","flexRowItemMargin","_","idx","Label","FieldArray","append","remove","isUrl","toLocaleLowerCase","endsWith","ValueInputComponent","TextArea","cx","defaultValue","md","deleteLabelButton","addLabelButton","centerAlignRow","equalSign","labelInput","sm","SelectWithAdd","addLabel","isCustom","setIsCustom","_options","target","val","useFolder","folderRequests","folders","fetchFolderIfNotFetchedAction","folderUID","isGrafanaRulerRule","grafana_alert","namespace_uid","GRAFANA_RULES_SOURCE_NAME","canSave","FALL_BACK_TIME_RANGE","getReferencedIds","getReferencedIdsForClassicCondition","getReferencedIdsForMath","getReferencedIdsForReduce","getTimeRanges","referencedRefIds","referencedRefIdsKey","backendSrv","dataSourceSrv","subject","ReplaySubject","lastResult","asObservable","empty","initialState","next","filterQuery","subscription","runRequest","nextResult","applyChange","preProcessed","preProcessPanelData","setStructureRevision","mapErrorToPanelData","unsubscribe","requestIsRunning","complete","initial","requestId","uuidv4","mapToPanelData","cancelNetworkRequestsOnUnsubscribe","dataByQuery","getTimeRange","relative","Math","max","min","getTimeRangeForExpression","rangeUtil","console","warn","results","entries","frames","queryError","change","dataQuery","isExpressionReference"],"sourceRoot":""}