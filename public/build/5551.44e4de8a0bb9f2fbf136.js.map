{"version":3,"file":"5551.44e4de8a0bb9f2fbf136.js","mappings":"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","sources":["webpack://grafana/./public/app/features/canvas/elements/icon.tsx","webpack://grafana/./public/app/features/canvas/elements/notFound.tsx","webpack://grafana/./public/app/features/canvas/types.ts","webpack://grafana/./public/app/features/canvas/elements/textBox.tsx","webpack://grafana/./public/app/features/canvas/registry.ts","webpack://grafana/./public/app/features/canvas/runtime/element.tsx","webpack://grafana/./public/app/plugins/panel/canvas/editor/options.ts"],"sourcesContent":["import React, { CSSProperties } from 'react';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\nimport {\n  ColorDimensionConfig,\n  ResourceDimensionConfig,\n  ResourceDimensionMode,\n  getPublicOrAbsoluteUrl,\n} from 'app/features/dimensions';\nimport { ColorDimensionEditor, ResourceDimensionEditor } from 'app/features/dimensions/editors';\nimport SVG from 'react-inlinesvg';\nimport { css } from '@emotion/css';\nimport { isString } from 'lodash';\nimport { LineConfig } from '../types';\nimport { DimensionContext } from 'app/features/dimensions/context';\n\nexport interface IconConfig {\n  path?: ResourceDimensionConfig;\n  fill?: ColorDimensionConfig;\n  stroke?: LineConfig;\n}\n\ninterface IconData {\n  path: string;\n  fill: string;\n  strokeColor?: string;\n  stroke?: number;\n}\n\n// When a stoke is defined, we want the path to be in page units\nconst svgStrokePathClass = css`\n  path {\n    vector-effect: non-scaling-stroke;\n  }\n`;\n\nexport function IconDisplay(props: CanvasElementProps) {\n  const { width, height, data } = props;\n  if (!data?.path) {\n    return null;\n  }\n\n  const svgStyle: CSSProperties = {\n    fill: data?.fill,\n    stroke: data?.strokeColor,\n    strokeWidth: data?.stroke,\n  };\n\n  return (\n    <SVG\n      src={data.path}\n      width={width}\n      height={height}\n      style={svgStyle}\n      className={svgStyle.strokeWidth ? svgStrokePathClass : undefined}\n    />\n  );\n}\n\nexport const iconItem: CanvasElementItem<IconConfig, IconData> = {\n  id: 'icon',\n  name: 'Icon',\n  description: 'SVG Icon display',\n\n  display: IconDisplay,\n\n  getNewOptions: (options) => ({\n    placement: {\n      width: 50,\n      height: 50,\n    },\n    ...options,\n    config: {\n      path: {\n        mode: ResourceDimensionMode.Fixed,\n        fixed: 'img/icons/unicons/question-circle.svg',\n      },\n      fill: { fixed: '#FFF899' },\n    },\n  }),\n\n  // Called when data changes\n  prepareData: (ctx: DimensionContext, cfg: IconConfig) => {\n    let path: string | undefined = undefined;\n    if (cfg.path) {\n      path = ctx.getResource(cfg.path).value();\n    }\n    if (!path || !isString(path)) {\n      path = getPublicOrAbsoluteUrl('img/icons/unicons/question-circle.svg');\n    }\n\n    const data: IconData = {\n      path,\n      fill: cfg.fill ? ctx.getColor(cfg.fill).value() : '#CCC',\n    };\n\n    if (cfg.stroke?.width && cfg.stroke.color) {\n      if (cfg.stroke.width > 0) {\n        data.stroke = cfg.stroke?.width;\n        data.strokeColor = ctx.getColor(cfg.stroke.color).value();\n      }\n    }\n    return data;\n  },\n\n  // Heatmap overlay options\n  registerOptionsUI: (builder) => {\n    const category = ['Icon'];\n    builder\n      .addCustomEditor({\n        category,\n        id: 'iconSelector',\n        path: 'config.path',\n        name: 'SVG Path',\n        editor: ResourceDimensionEditor,\n        settings: {\n          resourceType: 'icon',\n        },\n      })\n      .addCustomEditor({\n        category,\n        id: 'config.fill',\n        path: 'config.fill',\n        name: 'Fill color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {\n          // Configured values\n          fixed: 'grey',\n        },\n      })\n      .addSliderInput({\n        category,\n        path: 'config.stroke.width',\n        name: 'Stroke',\n        defaultValue: 0,\n        settings: {\n          min: 0,\n          max: 10,\n        },\n      })\n      .addCustomEditor({\n        category,\n        id: 'config.stroke.color',\n        path: 'config.stroke.color',\n        name: 'Stroke color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {\n          // Configured values\n          fixed: 'grey',\n        },\n        showIf: (cfg) => Boolean(cfg?.config?.stroke?.width),\n      });\n  },\n};\n","import React, { PureComponent } from 'react';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\n\ninterface NotFoundConfig {\n  orig?: any;\n}\n\nclass NotFoundDisplay extends PureComponent<CanvasElementProps<NotFoundConfig>> {\n  render() {\n    const { config } = this.props;\n    return (\n      <div>\n        <h3>NOT FOUND:</h3>\n        <pre>{JSON.stringify(config, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n\nexport const notFoundItem: CanvasElementItem<NotFoundConfig> = {\n  id: 'not-found',\n  name: 'Not found',\n  description: 'Display when element type is not found in the registry',\n\n  display: NotFoundDisplay,\n\n  defaultSize: {\n    width: 100,\n    height: 100,\n  },\n\n  getNewOptions: () => ({\n    config: {},\n  }),\n};\n","import { ColorDimensionConfig, ResourceDimensionConfig } from 'app/features/dimensions/types';\n\nexport interface Placement {\n  top?: number;\n  left?: number;\n  right?: number;\n  bottom?: number;\n\n  width?: number;\n  height?: number;\n}\n\nexport interface Anchor {\n  top?: boolean;\n  left?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n}\n\nexport enum BackgroundImageSize {\n  Original = 'original',\n  Contain = 'contain',\n  Cover = 'cover',\n  Fill = 'fill',\n  Tile = 'tile',\n}\n\nexport interface BackgroundConfig {\n  color?: ColorDimensionConfig;\n  image?: ResourceDimensionConfig;\n  size?: BackgroundImageSize;\n}\n\nexport interface LineConfig {\n  color?: ColorDimensionConfig;\n  width?: number;\n}\n","import React, { PureComponent } from 'react';\nimport { ColorDimensionEditor } from 'app/features/dimensions/editors/ColorDimensionEditor';\nimport { TextDimensionEditor } from 'app/features/dimensions/editors/TextDimensionEditor';\nimport { ColorDimensionConfig, TextDimensionConfig } from 'app/features/dimensions/types';\n\nimport { CanvasElementItem, CanvasElementProps } from '../element';\nimport { css } from '@emotion/css';\nimport { stylesFactory } from '@grafana/ui';\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from 'app/core/config';\nimport { DimensionContext } from 'app/features/dimensions/context';\n\nexport enum Align {\n  Left = 'left',\n  Center = 'center',\n  Right = 'right',\n}\n\nexport enum VAlign {\n  Top = 'top',\n  Middle = 'middle',\n  Bottom = 'bottom',\n}\n\ninterface TextBoxData {\n  text?: string;\n  color?: string;\n  size?: number; // 0 or missing will \"auto size\"\n  align: Align;\n  valign: VAlign;\n}\n\ninterface TextBoxConfig {\n  text?: TextDimensionConfig;\n  color?: ColorDimensionConfig;\n  size?: number; // 0 or missing will \"auto size\"\n  align: Align;\n  valign: VAlign;\n}\n\nclass TextBoxDisplay extends PureComponent<CanvasElementProps<TextBoxConfig, TextBoxData>> {\n  render() {\n    const { data } = this.props;\n    const styles = getStyles(config.theme2, data);\n    return (\n      <div className={styles.container}>\n        <span className={styles.span}>{data?.text}</span>\n      </div>\n    );\n  }\n}\nconst getStyles = stylesFactory((theme: GrafanaTheme2, data) => ({\n  container: css`\n    position: absolute;\n    height: 100%;\n    width: 100%;\n    display: table;\n  `,\n  span: css`\n    display: table-cell;\n    vertical-align: ${data.valign};\n    text-align: ${data.align};\n    font-size: ${data?.size}px;\n    color: ${data?.color};\n  `,\n}));\nexport const textBoxItem: CanvasElementItem<TextBoxConfig, TextBoxData> = {\n  id: 'text-box',\n  name: 'Text',\n  description: 'Text box',\n\n  display: TextBoxDisplay,\n\n  defaultSize: {\n    width: 240,\n    height: 160,\n  },\n\n  getNewOptions: (options) => ({\n    background: {\n      color: {\n        fixed: 'grey',\n      },\n    },\n    ...options,\n    config: {\n      align: Align.Left,\n      valign: VAlign.Middle,\n    },\n  }),\n\n  // Called when data changes\n  prepareData: (ctx: DimensionContext, cfg: TextBoxConfig) => {\n    const data: TextBoxData = {\n      text: cfg.text ? ctx.getText(cfg.text).value() : '',\n      align: cfg.align ?? Align.Center,\n      valign: cfg.valign ?? VAlign.Middle,\n      size: cfg.size,\n    };\n\n    if (cfg.color) {\n      data.color = ctx.getColor(cfg.color).value();\n    }\n\n    return data;\n  },\n\n  // Heatmap overlay options\n  registerOptionsUI: (builder) => {\n    const category = ['Text box'];\n    builder\n      .addCustomEditor({\n        category,\n        id: 'textSelector',\n        path: 'config.text',\n        name: 'Text',\n        editor: TextDimensionEditor,\n      })\n      .addCustomEditor({\n        category,\n        id: 'config.color',\n        path: 'config.color',\n        name: 'Text color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {},\n      })\n      .addRadio({\n        category,\n        path: 'config.align',\n        name: 'Align text',\n        settings: {\n          options: [\n            { value: Align.Left, label: 'Left' },\n            { value: Align.Center, label: 'Center' },\n            { value: Align.Right, label: 'Right' },\n          ],\n        },\n        defaultValue: Align.Left,\n      })\n      .addRadio({\n        category,\n        path: 'config.valign',\n        name: 'Vertical align',\n        settings: {\n          options: [\n            { value: VAlign.Top, label: 'Top' },\n            { value: VAlign.Middle, label: 'Middle' },\n            { value: VAlign.Bottom, label: 'Bottom' },\n          ],\n        },\n        defaultValue: VAlign.Middle,\n      })\n      .addNumberInput({\n        category,\n        path: 'config.size',\n        name: 'Text size',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n  },\n};\n","import { Registry } from '@grafana/data';\nimport { CanvasElementItem, CanvasElementOptions } from './element';\nimport { iconItem } from './elements/icon';\nimport { textBoxItem } from './elements/textBox';\n\nexport const DEFAULT_CANVAS_ELEMENT_CONFIG: CanvasElementOptions = {\n  ...iconItem.getNewOptions(),\n  type: iconItem.id,\n  name: `Element 1`,\n};\n\nexport const canvasElementRegistry = new Registry<CanvasElementItem>(() => [\n  iconItem, // default for now\n  textBoxItem,\n]);\n","import React, { CSSProperties } from 'react';\nimport { OnDrag, OnResize } from 'react-moveable/declaration/types';\n\nimport {\n  BackgroundImageSize,\n  CanvasElementItem,\n  CanvasElementOptions,\n  canvasElementRegistry,\n  Placement,\n  Anchor,\n} from 'app/features/canvas';\nimport { DimensionContext } from 'app/features/dimensions';\nimport { notFoundItem } from 'app/features/canvas/elements/notFound';\nimport { GroupState } from './group';\nimport { LayerElement } from 'app/core/components/Layers/types';\nimport { Scene } from './scene';\n\nlet counter = 0;\n\nexport class ElementState implements LayerElement {\n  // UID necessary for moveable to work (for now)\n  readonly UID = counter++;\n  revId = 0;\n  sizeStyle: CSSProperties = {};\n  dataStyle: CSSProperties = {};\n\n  // Filled in by ref\n  div?: HTMLDivElement;\n\n  // Calculated\n  width = 100;\n  height = 100;\n  data?: any; // depends on the type\n\n  // From options, but always set and always valid\n  anchor: Anchor;\n  placement: Placement;\n\n  constructor(public item: CanvasElementItem, public options: CanvasElementOptions, public parent?: GroupState) {\n    const fallbackName = `Element ${Date.now()}`;\n    if (!options) {\n      this.options = { type: item.id, name: fallbackName };\n    }\n    this.anchor = options.anchor ?? {};\n    this.placement = options.placement ?? {};\n    options.anchor = this.anchor;\n    options.placement = this.placement;\n\n    const scene = this.getScene();\n    if (!options.name) {\n      const newName = scene?.getNextElementName();\n      options.name = newName ?? fallbackName;\n    }\n    scene?.byName.set(options.name, this);\n  }\n\n  private getScene(): Scene | undefined {\n    let trav = this.parent;\n    while (trav) {\n      if (trav.isRoot()) {\n        return trav.scene;\n        break;\n      }\n      trav = trav.parent;\n    }\n\n    return undefined;\n  }\n\n  getName() {\n    return this.options.name;\n  }\n\n  validatePlacement() {\n    const { anchor, placement } = this;\n    if (!(anchor.left || anchor.right)) {\n      anchor.left = true;\n    }\n    if (!(anchor.top || anchor.bottom)) {\n      anchor.top = true;\n    }\n\n    const w = placement.width ?? 100; // this.div ? this.div.clientWidth : this.width;\n    const h = placement.height ?? 100; // this.div ? this.div.clientHeight : this.height;\n\n    if (anchor.top) {\n      if (!placement.top) {\n        placement.top = 0;\n      }\n      if (anchor.bottom) {\n        delete placement.height;\n      } else {\n        placement.height = h;\n        delete placement.bottom;\n      }\n    } else if (anchor.bottom) {\n      if (!placement.bottom) {\n        placement.bottom = 0;\n      }\n      placement.height = h;\n      delete placement.top;\n    }\n\n    if (anchor.left) {\n      if (!placement.left) {\n        placement.left = 0;\n      }\n      if (anchor.right) {\n        delete placement.width;\n      } else {\n        placement.width = w;\n        delete placement.right;\n      }\n    } else if (anchor.right) {\n      if (!placement.right) {\n        placement.right = 0;\n      }\n      placement.width = w;\n      delete placement.left;\n    }\n\n    this.width = w;\n    this.height = h;\n\n    this.options.anchor = this.anchor;\n    this.options.placement = this.placement;\n  }\n\n  // The parent size, need to set our own size based on offsets\n  updateSize(width: number, height: number) {\n    this.width = width;\n    this.height = height;\n    this.validatePlacement();\n\n    // Update the CSS position\n    this.sizeStyle = {\n      ...this.options.placement,\n      position: 'absolute',\n    };\n  }\n\n  updateData(ctx: DimensionContext) {\n    if (this.item.prepareData) {\n      this.data = this.item.prepareData(ctx, this.options.config);\n      this.revId++; // rerender\n    }\n\n    const { background, border } = this.options;\n    const css: CSSProperties = {};\n    if (background) {\n      if (background.color) {\n        const color = ctx.getColor(background.color);\n        css.backgroundColor = color.value();\n      }\n      if (background.image) {\n        const image = ctx.getResource(background.image);\n        if (image) {\n          const v = image.value();\n          if (v) {\n            css.backgroundImage = `url(\"${v}\")`;\n            switch (background.size ?? BackgroundImageSize.Contain) {\n              case BackgroundImageSize.Contain:\n                css.backgroundSize = 'contain';\n                css.backgroundRepeat = 'no-repeat';\n                break;\n              case BackgroundImageSize.Cover:\n                css.backgroundSize = 'cover';\n                css.backgroundRepeat = 'no-repeat';\n                break;\n              case BackgroundImageSize.Original:\n                css.backgroundRepeat = 'no-repeat';\n                break;\n              case BackgroundImageSize.Tile:\n                css.backgroundRepeat = 'repeat';\n                break;\n              case BackgroundImageSize.Fill:\n                css.backgroundSize = '100% 100%';\n                break;\n            }\n          }\n        }\n      }\n    }\n\n    if (border && border.color && border.width) {\n      const color = ctx.getColor(border.color);\n      css.borderWidth = border.width;\n      css.borderStyle = 'solid';\n      css.borderColor = color.value();\n\n      // Move the image to inside the border\n      if (css.backgroundImage) {\n        css.backgroundOrigin = 'padding-box';\n      }\n    }\n\n    this.dataStyle = css;\n  }\n\n  /** Recursively visit all nodes */\n  visit(visitor: (v: ElementState) => void) {\n    visitor(this);\n  }\n\n  onChange(options: CanvasElementOptions) {\n    if (this.item.id !== options.type) {\n      this.item = canvasElementRegistry.getIfExists(options.type) ?? notFoundItem;\n    }\n\n    // rename handling\n    const oldName = this.options.name;\n    const newName = options.name;\n\n    this.revId++;\n    this.options = { ...options };\n    let trav = this.parent;\n    while (trav) {\n      if (trav.isRoot()) {\n        trav.scene.save();\n        break;\n      }\n      trav.revId++;\n      trav = trav.parent;\n    }\n\n    const scene = this.getScene();\n    if (oldName !== newName && scene) {\n      scene.byName.delete(oldName);\n      scene.byName.set(newName, this);\n    }\n  }\n\n  getSaveModel() {\n    return { ...this.options };\n  }\n\n  initElement = (target: HTMLDivElement) => {\n    this.div = target;\n  };\n\n  applyDrag = (event: OnDrag) => {\n    const { placement, anchor } = this;\n\n    const deltaX = event.delta[0];\n    const deltaY = event.delta[1];\n\n    const style = event.target.style;\n    if (anchor.top) {\n      placement.top! += deltaY;\n      style.top = `${placement.top}px`;\n    }\n    if (anchor.bottom) {\n      placement.bottom! -= deltaY;\n      style.bottom = `${placement.bottom}px`;\n    }\n    if (anchor.left) {\n      placement.left! += deltaX;\n      style.left = `${placement.left}px`;\n    }\n    if (anchor.right) {\n      placement.right! -= deltaX;\n      style.right = `${placement.right}px`;\n    }\n  };\n\n  // kinda like:\n  // https://github.com/grafana/grafana-edge-app/blob/main/src/panels/draw/WrapItem.tsx#L44\n  applyResize = (event: OnResize) => {\n    const { placement, anchor } = this;\n\n    const style = event.target.style;\n    const deltaX = event.delta[0];\n    const deltaY = event.delta[1];\n    const dirLR = event.direction[0];\n    const dirTB = event.direction[1];\n    if (dirLR === 1) {\n      // RIGHT\n      if (anchor.right) {\n        placement.right! -= deltaX;\n        style.right = `${placement.right}px`;\n        if (!anchor.left) {\n          placement.width = event.width;\n          style.width = `${placement.width}px`;\n        }\n      } else {\n        placement.width! = event.width;\n        style.width = `${placement.width}px`;\n      }\n    } else if (dirLR === -1) {\n      // LEFT\n      if (anchor.left) {\n        placement.left! -= deltaX;\n        placement.width! = event.width;\n        style.left = `${placement.left}px`;\n        style.width = `${placement.width}px`;\n      } else {\n        placement.width! += deltaX;\n        style.width = `${placement.width}px`;\n      }\n    }\n\n    if (dirTB === -1) {\n      // TOP\n      if (anchor.top) {\n        placement.top! -= deltaY;\n        placement.height = event.height;\n        style.top = `${placement.top}px`;\n        style.height = `${placement.height}px`;\n      } else {\n        placement.height = event.height;\n        style.height = `${placement.height}px`;\n      }\n    } else if (dirTB === 1) {\n      // BOTTOM\n      if (anchor.bottom) {\n        placement.bottom! -= deltaY;\n        placement.height! = event.height;\n        style.bottom = `${placement.bottom}px`;\n        style.height = `${placement.height}px`;\n      } else {\n        placement.height! = event.height;\n        style.height = `${placement.height}px`;\n      }\n    }\n\n    this.width = event.width;\n    this.height = event.height;\n  };\n\n  render() {\n    const { item } = this;\n    return (\n      <div key={`${this.UID}`} style={{ ...this.sizeStyle, ...this.dataStyle }} ref={this.initElement}>\n        <item.display\n          key={`${this.UID}/${this.revId}`}\n          config={this.options.config}\n          width={this.width}\n          height={this.height}\n          data={this.data}\n        />\n      </div>\n    );\n  }\n}\n","import { PanelOptionsSupplier } from '@grafana/data/src/panel/PanelPlugin';\nimport { BackgroundImageSize, CanvasElementOptions } from 'app/features/canvas';\nimport { ColorDimensionEditor, ResourceDimensionEditor } from 'app/features/dimensions/editors';\n\ninterface OptionSuppliers {\n  addBackground: PanelOptionsSupplier<CanvasElementOptions>;\n  addBorder: PanelOptionsSupplier<CanvasElementOptions>;\n}\n\nexport const optionBuilder: OptionSuppliers = {\n  addBackground: (builder, context) => {\n    const category = ['Background'];\n    builder\n      .addCustomEditor({\n        category,\n        id: 'background.color',\n        path: 'background.color',\n        name: 'Color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {\n          // Configured values\n          fixed: '',\n        },\n      })\n      .addCustomEditor({\n        category,\n        id: 'background.image',\n        path: 'background.image',\n        name: 'Image',\n        editor: ResourceDimensionEditor,\n        settings: {\n          resourceType: 'image',\n        },\n      })\n      .addRadio({\n        category,\n        path: 'background.size',\n        name: 'Image size',\n        settings: {\n          options: [\n            { value: BackgroundImageSize.Original, label: 'Original' },\n            { value: BackgroundImageSize.Contain, label: 'Contain' },\n            { value: BackgroundImageSize.Cover, label: 'Cover' },\n            { value: BackgroundImageSize.Fill, label: 'Fill' },\n            { value: BackgroundImageSize.Tile, label: 'Tile' },\n          ],\n        },\n        defaultValue: BackgroundImageSize.Cover,\n      });\n  },\n\n  addBorder: (builder, context) => {\n    const category = ['Border'];\n    builder.addSliderInput({\n      category,\n      path: 'border.width',\n      name: 'Width',\n      defaultValue: 2,\n      settings: {\n        min: 0,\n        max: 20,\n      },\n    });\n\n    if (context.options?.border?.width) {\n      builder.addCustomEditor({\n        category,\n        id: 'border.color',\n        path: 'border.color',\n        name: 'Color',\n        editor: ColorDimensionEditor,\n        settings: {},\n        defaultValue: {\n          // Configured values\n          fixed: '',\n        },\n      });\n    }\n  },\n};\n"],"names":["svgStrokePathClass","css","iconItem","id","name","description","display","props","width","height","data","path","svgStyle","fill","stroke","strokeColor","strokeWidth","src","style","className","undefined","getNewOptions","options","placement","config","mode","ResourceDimensionMode","fixed","prepareData","ctx","cfg","getResource","value","isString","getPublicOrAbsoluteUrl","getColor","color","registerOptionsUI","builder","category","addCustomEditor","editor","ResourceDimensionEditor","settings","resourceType","ColorDimensionEditor","defaultValue","addSliderInput","min","max","showIf","Boolean","NotFoundDisplay","PureComponent","render","this","JSON","stringify","notFoundItem","defaultSize","BackgroundImageSize","Align","VAlign","TextBoxDisplay","styles","getStyles","container","span","text","stylesFactory","theme","valign","align","size","textBoxItem","background","Left","Middle","getText","Center","TextDimensionEditor","addRadio","label","Right","Top","Bottom","addNumberInput","placeholder","DEFAULT_CANVAS_ELEMENT_CONFIG","type","canvasElementRegistry","Registry","counter","ElementState","constructor","item","parent","target","div","event","anchor","deltaX","delta","deltaY","top","bottom","left","right","dirLR","direction","dirTB","fallbackName","Date","now","scene","getScene","newName","getNextElementName","byName","set","trav","isRoot","getName","validatePlacement","w","h","updateSize","sizeStyle","position","updateData","revId","border","backgroundColor","image","v","backgroundImage","backgroundSize","backgroundRepeat","borderWidth","borderStyle","borderColor","backgroundOrigin","dataStyle","visit","visitor","onChange","oldName","save","delete","getSaveModel","ref","initElement","UID","optionBuilder","addBackground","context","addBorder"],"sourceRoot":""}